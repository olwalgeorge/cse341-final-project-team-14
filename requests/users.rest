@baseUrl = http://localhost:3000
@token = {{login.response.body.token}}

### Register User - Successful registration
# @name register
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "fullName": "Tom Harry",
  "username": "tomharry",
  "password": "TestPasswor",
  "email": "tom.harry@example.com"
}

### Register User - Missing Required Fields
# Test error handling for missing required fields
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "username": "missingfields",
  "password": "TestPassword123!"
  // Missing email and fullName
}

### Register User - Invalid Email Format
# Test error handling for invalid email format
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "fullName": "Invalid Email User",
  "username": "invalidemail",
  "password": "TestPassword123!",
  "email": "not-an-email"
}

### Register User - Multiple Validation Errors
# Test handling of multiple validation errors simultaneously
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "username": "123badusername",
  "password": "weak",
  "email": "not-valid-email"
}

### Register User - Weak Password
# Test error handling for password that doesn't meet complexity requirements
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "fullName": "Weak Password User",
  "username": "weakpassword",
  "password": "weak",
  "email": "weak.password@example.com"
}

### Register User - Username Already Exists
# Test error handling for duplicate username
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "fullName": "Duplicate Username",
  "username": "tomharry",  
  "password": "TestPassword123!",
  "email": "new.email@example.com"
}

### Register User - Email Already Exists
# Test error handling for duplicate email
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "fullName": "Duplicate Email",
  "username": "uniqueuser",
  "password": "TestPassword123!",
  "email": "tom.harry@example.com"
}

### Register User - Invalid Username Format
# Test error handling for username that doesn't meet format requirements
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "fullName": "Bad Username",
  "username": "123invalid",
  "password": "TestPassword123!",
  "email": "bad.username@example.com"
}

### Login User
# @name login
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "password": "TestPassword123!3",
  "email": "john.smith@example.com"
}

### Get all users
GET {{baseUrl}}/users
Authorization: Bearer {{token}}

### Get all users with pagination
GET {{baseUrl}}/users?page=1&limit=10
# No need for Authorization Bearer token with cookie-based auth

### Get all users with sorting (ascending by username)
GET {{baseUrl}}/users?sort=userID
# No need for Authorization Bearer token with cookie-based auth

### Get all users with sorting (descending by createdAt)
GET {{baseUrl}}/users?sort=-createdAt
# No need for Authorization Bearer token with cookie-based auth

### Get all users with multiple sorting criteria
GET {{baseUrl}}/users?sort=-role,username
# No need for Authorization Bearer token with cookie-based auth

### Filter users by username (partial match)
GET {{baseUrl}}/users?username=admin
# No need for Authorization Bearer token with cookie-based auth

### Filter users by email domain
GET {{baseUrl}}/users?email=example.com
# No need for Authorization Bearer token with cookie-based auth

### Filter users by role
GET {{baseUrl}}/users?role=ADMIN
# No need for Authorization Bearer token with cookie-based auth

### Filter users by verification status
GET {{baseUrl}}/users?isVerified=true
# No need for Authorization Bearer token with cookie-based auth

### Combined filtering, sorting and pagination
GET {{baseUrl}}/users?role=ADMIN&sort=-createdAt&page=1&limit=5
# No need for Authorization Bearer token with cookie-based auth

### Search Users
GET {{baseUrl}}/users/search?term=admin
# No need for Authorization Bearer token with cookie-based auth

### Search Users with Pagination
GET {{baseUrl}}/users/search?term=admin&page=1&limit=5
# No need for Authorization Bearer token with cookie-based auth

### Search Users with Sorting
GET {{baseUrl}}/users/search?term=admin&sort=username
# No need for Authorization Bearer token with cookie-based auth

### Get User Profile
GET {{baseUrl}}/users/profile
# No need for Authorization Bearer token with cookie-based auth

### Update User Profile
PUT {{baseUrl}}/users/profile 
Content-Type: application/json
# No need for Authorization Bearer token with cookie-based auth

{
  "role": "SUPERADMIN"
}

### Get User By ID (userID format)
GET {{baseUrl}}/users/userID/SM-00001
# No need for Authorization Bearer token with cookie-based auth

### Get User By Username
GET {{baseUrl}}/users/username/superadmin
# No need for Authorization Bearer token with cookie-based auth

### Get User By Email
GET {{baseUrl}}/users/email/superadmin@example.com
# No need for Authorization Bearer token with cookie-based auth

### Get Users By Role
GET {{baseUrl}}/users/role/ADMIN
# No need for Authorization Bearer token with cookie-based auth

### Update User By ID (Using MongoDB ObjectId)
PUT {{baseUrl}}/users/67fa30bd8a88a8c6fa0014d1
Content-Type: application/json
# No need for Authorization Bearer token with cookie-based auth

{
  "fullName": "Updated Admin Name",
  "role": "SUPERADMIN"
}

### Delete User By ID
DELETE {{baseUrl}}/users/67fa30bd8a88a8c6fa0014d1
# No need for Authorization Bearer token with cookie-based auth

### Delete All Users (Requires SUPERADMIN)
DELETE {{baseUrl}}/users
# No need for Authorization Bearer token with cookie-based auth

### Logout User
POST {{baseUrl}}/auth/logout
# No need for Authorization Bearer token with cookie-based auth
