### Register User
POST http://localhost:3000/auth/register
Content-Type: application/json

{
  "fullName": "Super Admin",
  "username": "superadmin",
  "password": "SuperAdmin1234!",
  "email": "superadmin@example.com"
}

### Login User
POST http://localhost:3000/auth/login
Content-Type: application/json

{
   "password": "SuperAdmin1234!",
  "email": "omondi@example.com" 
}

### Get User Profile (Requires Authentication)
GET http://localhost:3000/users/profile
# No need for Authorization Bearer token with cookie-based auth
# The session cookie will be automatically sent by the browser

### Update User Profile (Requires Authentication)
PUT http://localhost:3000/users/profile 
Content-Type: application/json
# No need for Authorization Bearer token with cookie-based auth

{
  "fullName": "George Olwal"
}

### Logout User (Requires Authentication)
POST http://localhost:3000/auth/logout
# No need for Authorization Bearer token with cookie-based auth

### Get All Users (Requires Authentication)
GET http://localhost:3000/users
# No need for Authorization Bearer token with cookie-based auth

### Get User By ID (Requires Authentication)
GET http://localhost:3000/users/userID/SM-00001
# No need for Authorization Bearer token with cookie-based auth

### Delete User By ID (Requires Authentication)
DELETE http://localhost:3000/users/67fa30bd8a88a8c6fa0014d1
# No need for Authorization Bearer token with cookie-based auth

### Get User By Username (Requires Authentication)
GET http://localhost:3000/users/username/superadmin
# No need for Authorization Bearer token with cookie-based auth

### Get User By Email (Requires Authentication)
GET http://localhost:3000/users/email/ben@example.com
# No need for Authorization Bearer token with cookie-based auth

### Get Users By Role (Requires Authentication)
GET http://localhost:3000/users/role/SUPERADMIN
# No need for Authorization Bearer token with cookie-based auth

### Delete All Users (Requires Authentication)
DELETE http://localhost:3000/users
# No need for Authorization Bearer token with cookie-based auth

### Update User By ID (Requires Authentication) - Using MongoDB ObjectId
PUT http://localhost:3000/users/67fa30bd8a88a8c6fa0014d1
Content-Type: application/json
# No need for Authorization Bearer token with cookie-based auth

{
 "fullName": "Super Admin Updated",
 "role": "SUPERADMIN"
}

### Update User By ID (Requires Authentication) - Using userID format
PUT http://localhost:3000/users/SM-00001
Content-Type: application/json
# No need for Authorization Bearer token with cookie-based auth

{
 "fullName": "Super Admin Updated via UserID",
 "role": "SUPERADMIN"
}

### PRODUCT ROUTES ###

### Get All Products
GET http://localhost:3000/products

### Get Products with Filtering
GET http://localhost:3000/products?category=Electronics&minPrice=100&maxPrice=1000&inStock=true&page=1&limit=10

### Search Products
GET http://localhost:3000/products/search?term=laptop

### Get Product by MongoDB ID
GET http://localhost:3000/products/67f8ec8aaf6bfc397a056b7f

### Get Product by Product ID
GET http://localhost:3000/products/productID/PR-00001

### Get Products by Category
GET http://localhost:3000/products/category/Electronics

### Get Products by Supplier
GET http://localhost:3000/products/supplier/67f66c737ed7ddb60e54af6f

### Create New Product (Requires Authentication)
POST http://localhost:3000/products
Content-Type: application/json
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

{
  "name": "MacBook Air M3",
  "description": "Latest MacBook Air with M3 chip",
  "sellingPrice": 1699.99,
  "costPrice": 1400.00,
  "category": "Electronics",
  "supplier": "67f66c737ed7ddb60e54af6f",
  "sku": "APPL789012",
  "tags": ["laptop", "apple", "macbook air"],
  "unit": "pcs"
}

### Update Product (Requires Authentication)
PUT http://localhost:3000/products/67f8cdc8f72a040e609a5ca9
Content-Type: application/json
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

{
  "name": "MacBook Pro M3 Pro",
  "description": "Latest MacBook Pro with M3 Pro chip",
  "sellingPrice": 2499.99,
  "costPrice": 2100.00,
  "category": "Electronics"
}

### Delete Product (Requires Authentication)
DELETE http://localhost:3000/products/65fb123abc456d789e012345
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### ORDER ROUTES ###

### Get All Orders (Requires Authentication)
GET http://localhost:3000/orders
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Get Orders with Filtering (Requires Authentication)
GET http://localhost:3000/orders?status=Pending
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Get Order by MongoDB ID (Requires Authentication)
GET http://localhost:3000/orders/67f81e533e0490886947f008
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Get Order by Order ID (Requires Authentication)
GET http://localhost:3000/orders/orderID/OR-00001
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Get Orders by Customer (Requires Authentication)
GET http://localhost:3000/orders/customer/65fb123abc456d789e012348
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Get Orders by Status (Requires Authentication)
GET http://localhost:3000/orders/status/pending
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Create New Order (Requires Authentication)
POST http://localhost:3000/orders
Content-Type: application/json
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

{
  "customer": "67f67b829d34cfbe039e94be",
  "items": [
    {
      "product": "67f8cdc8f72a040e609a5ca9",
      "quantity": 2,
      "price": 2000.00
    },
    {
      "product": "67f8ce0df72a040e609a5caf",
      "quantity": 1,
      "price": 1700.00
    }
  ],
  "shippingAddress": {
    "street": "123 Main St",
    "city": "San Francisco",
    "state": "CA",
    "postalCode": "94107",
    "country": "USA"
  },
  "status": "Pending"
}

### Create New Order Using Product sellingPrice (Requires Authentication)
POST http://localhost:3000/orders
Content-Type: application/json
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

{
  "customer": "67f67b829d34cfbe039e94be",
  "items": [
    {
      "product": "67f8cdc8f72a040e609a5ca9",
      "quantity": 2
    },
    {
      "product": "67f8ce0df72a040e609a5caf",
      "quantity": 1
    }
  ],
  "shippingAddress": {
    "street": "123 Main St",
    "city": "San Francisco",
    "state": "CA",
    "postalCode": "94107",
    "country": "USA"
  },
  "status": "Pending"
}

### Delete Order (Requires Authentication)
DELETE http://localhost:3000/orders/65fb123abc456d789e012347
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Delete All Orders (Requires Authentication)
DELETE http://localhost:3000/orders
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### SUPPLIER ROUTES ###

### Get All Suppliers
GET http://localhost:3000/suppliers

### Get Suppliers with Filtering
GET http://localhost:3000/suppliers?name=Tech&country=USA&page=1&limit=10

### Search Suppliers
GET http://localhost:3000/suppliers/search?term=electronics

### Get Supplier by MongoDB ID
GET http://localhost:3000/suppliers/65fb123abc456d789e012346

### Get Supplier by Supplier ID
GET http://localhost:3000/suppliers/supplierID/SP-00001

### Create New Supplier (Requires Authentication)
POST http://localhost:3000/suppliers
Content-Type: application/json
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

{
  "name": "Electronics Inc.",
  "contact": {
    "phone": "1112223333",
    "email": "contact@electronicsinc.com"
  },
  "address": {
    "street": "456 Electronics Drive",
    "city": "New York",
    "state": "NY",
    "postalCode": "10001",
    "country": "USA"
  }
}

### Update Supplier (Requires Authentication)
PUT http://localhost:3000/suppliers/65fb123abc456d789e012346
Content-Type: application/json
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

{
  "name": "TechSupply Corporation",
  "contact": {
    "phone": "9876543210"
  }
}

### Delete Supplier (Requires Authentication)
DELETE http://localhost:3000/suppliers/65fb123abc456d789e012346
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Delete All Suppliers (Requires Authentication)
DELETE http://localhost:3000/suppliers
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### CUSTOMER ROUTES ###

### Get All Customers (Requires Authentication)
GET http://localhost:3000/customers
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Get Customers with Filtering (Requires Authentication)
GET http://localhost:3000/customers?name=John&page=1&limit=10
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Search Customers (Requires Authentication)
GET http://localhost:3000/customers/search?term=john
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Get Customer by MongoDB ID (Requires Authentication)
GET http://localhost:3000/customers/67f67b829d34cfbe039e94be
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Get Customer by Customer ID (Requires Authentication)
GET http://localhost:3000/customers/customerID/CU-00001
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Get Customer by Email (Requires Authentication)
GET http://localhost:3000/customers/email/john.doe@example.com
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Create New Customer (Requires Authentication)
POST http://localhost:3000/customers
Content-Type: application/json
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

{
  "name": "George Doe",
  "email": "george.doe@example.com",
  "phone": "1112223333",
  "address": {
    "street": "456 Elm St",
    "city": "Othertown",
    "state": "TX",
    "postalCode": "67890",
    "country": "USA"
  }
}

### Update Customer (Requires Authentication)
PUT http://localhost:3000/customers/65fb123abc456d789e012349
Content-Type: application/json
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

{
  "name": "John M. Doe",
  "phone": "9876543210"
}

### Delete Customer (Requires Authentication)
DELETE http://localhost:3000/customers/65fb123abc456d789e012349
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Delete All Customers (Requires Authentication)
DELETE http://localhost:3000/customers
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### PURCHASE ROUTES ###

### Get All Purchases (Requires Authentication)
GET http://localhost:3000/purchases
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Get Purchases with Filtering (Requires Authentication)
GET http://localhost:3000/purchases?status=Ordered&paymentStatus=Unpaid&fromDate=2023-01-01&toDate=2023-12-31&page=1&limit=10
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Get Purchase by MongoDB ID (Requires Authentication)
GET http://localhost:3000/purchases/65fb123abc456d789e012350
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Get Purchase by Purchase ID (Requires Authentication)
GET http://localhost:3000/purchases/purchaseID/PU-00001
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Get Purchases by Supplier (Requires Authentication)
GET http://localhost:3000/purchases/supplier/65fb123abc456d789e012346
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Get Purchases by Status - Pending (Requires Authentication)
GET http://localhost:3000/purchases/status/Pending
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Get Purchases by Status - Ordered (Requires Authentication)
GET http://localhost:3000/purchases/status/Ordered
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Get Purchases by Status - Received (Requires Authentication)
GET http://localhost:3000/purchases/status/Received
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Create New Purchase (Requires Authentication)
POST http://localhost:3000/purchases
Content-Type: application/json
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

{
  "supplier": "67f66c737ed7ddb60e54af6f",
  "items": [
    {
      "product": "67f8cdc8f72a040e609a5ca9",
      "quantity": 5,
      "price": 1800.00
    },
    {
      "product": "67f8ce0df72a040e609a5caf",
      "quantity": 3,
      "price": 550.00
    }
  ],
  "purchaseDate": "2023-05-15T10:00:00Z",
  "status": "Ordered",
  "paymentStatus": "Unpaid",
  "paymentDue": "2023-06-15T10:00:00Z",
  "notes": "Bulk purchase of laptops for inventory"
}

### Create New Purchase with Multiple Items (Requires Authentication)
POST http://localhost:3000/purchases
Content-Type: application/json
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

{
  "supplier": "67f66c737ed7ddb60e54af6f",
  "items": [
    {
      "product": "67f8cdc8f72a040e609a5ca9",
      "quantity": 5
    },
    {
      "product": "67f8ce0df72a040e609a5caf",
      "quantity": 3
    }
  ],
  "status": "Pending",
  "paymentStatus": "Unpaid",
  "paymentDue": "2023-06-30T10:00:00Z"
}

### Update Purchase Status (Requires Authentication)
PUT http://localhost:3000/purchases/65fb123abc456d789e012350
Content-Type: application/json
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

{
  "status": "Received",
  "paymentStatus": "Paid"
}

### Update Purchase Items (Requires Authentication)
PUT http://localhost:3000/purchases/65fb123abc456d789e012350
Content-Type: application/json
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

{
  "items": [
    {
      "product": "65fb123abc456d789e012345",
      "quantity": 8,
      "price": 1750.00
    }
  ],
  "totalAmount": 14000.00
}

### Update Purchase Notes (Requires Authentication)
PUT http://localhost:3000/purchases/65fb123abc456d789e012350
Content-Type: application/json
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

{
  "notes": "Bulk order with priority shipping. Contact supplier for expedited processing."
}

### Delete Purchase (Requires Authentication)
DELETE http://localhost:3000/purchases/65fb123abc456d789e012350
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Delete All Purchases (Requires Authentication)
DELETE http://localhost:3000/purchases
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### WAREHOUSE ROUTES ###

### Get All Warehouses (Requires Authentication)
GET http://localhost:3000/warehouses
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Get Warehouses with Basic Filtering (Requires Authentication)
GET http://localhost:3000/warehouses?name=Main&status=Active&page=1&limit=10
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Get Warehouses with Address Filtering (Requires Authentication)
GET http://localhost:3000/warehouses?city=Atlanta&state=GA&country=USA&page=1&limit=10
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Get Warehouses with Advanced Filtering and Sorting (Requires Authentication)
GET http://localhost:3000/warehouses?name=Distribution&status=Active&city=Atlanta&sort=capacity,-createdAt&page=1&limit=10
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Get Warehouse by MongoDB ID (Requires Authentication)
GET http://localhost:3000/warehouses/67f8e3c85b1777f2f72ac8e9
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Get Warehouse by Warehouse ID (Requires Authentication)
GET http://localhost:3000/warehouses/warehouseID/WH-00001
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Get Warehouse by Name (Requires Authentication)
GET http://localhost:3000/warehouses/name/East%20Distribution%20Center
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Create New Warehouse (Requires Authentication)
POST http://localhost:3000/warehouses
Content-Type: application/json
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

{
  "name": "East Distribution Center",
  "description": "Primary warehouse for eastern distribution",
  "capacity": 50000,
  "capacityUnit": "sqft",
  "status": "Active",
  "contact": {
    "name": "John Manager",
    "phone": "5551234567",
    "email": "john.manager@example.com"
  },
  "address": {
    "street": "123 Warehouse Blvd",
    "city": "Atlanta",
    "state": "GA",
    "postalCode": "30301",
    "country": "USA"
  }
}

### Update Warehouse (Requires Authentication)
PUT http://localhost:3000/warehouses/67f67b829d34cfbe039e94bf
Content-Type: application/json
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

{
  "status": "Maintenance",
  "contact": {
    "phone": "5559876543",
    "email": "new.manager@example.com"
  }
}

### Delete Warehouse (Requires Authentication)
DELETE http://localhost:3000/warehouses/67f67b829d34cfbe039e94bf
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Delete All Warehouses (Requires Authentication)
DELETE http://localhost:3000/warehouses
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### INVENTORY ROUTES ###

### Get All Inventory Items
GET http://localhost:3000/inventory

### Get Inventory with Filtering
GET http://localhost:3000/inventory?warehouse=67f67b829d34cfbe039e94bf&stockStatus=Low%20Stock&page=1&limit=10

### Get Inventory Item by MongoDB ID
GET http://localhost:3000/inventory/67f8f19c967f8b21cb2ae9c5

### Get Inventory Item by Inventory ID
GET http://localhost:3000/inventory/inventoryID/IN-00001

### Get Inventory Items by Warehouse
GET http://localhost:3000/inventory/warehouse/67f8e3c85b1777f2f72ac8e9

### Get Inventory Items by Product
GET http://localhost:3000/inventory/product/67f8ec8aaf6bfc397a056b7f

### Get Inventory Items by Stock Status
GET http://localhost:3000/inventory/status/Low%20Stock

### Create New Inventory Item (Requires Authentication)
POST http://localhost:3000/inventory
Content-Type: application/json
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

{
  "product": "67f8ec8aaf6bfc397a056b7f",
  "warehouse": "67f8e3c85b1777f2f72ac8e9",
  "quantity": 10,
  "minStockLevel": 5,
  "maxStockLevel": 10,
  "location": {
    "aisle": "A5",
    "rack": "R3",
    "bin": "B12"
  },
  "notes": "Main stock location for laptops"
}

### Update Inventory Item (Requires Authentication)
PUT http://localhost:3000/inventory/67f8cdc8f72a040e609a5ca8
Content-Type: application/json
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

{
  "quantity": 45,
  "location": {
    "aisle": "A6",
    "rack": "R2"
  },
  "lastStockCheck": "2023-07-15T10:00:00Z"
}

### Delete Inventory Item (Requires Authentication)
DELETE http://localhost:3000/inventory/67f8cdc8f72a040e609a5ca8
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Delete All Inventory Items (Requires Authentication)
DELETE http://localhost:3000/inventory
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### INVENTORY TRANSACTION ROUTES ###

### Get All Inventory Transactions (Requires Authentication)
GET http://localhost:3000/inventory-transactions
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Get Inventory Transactions with Filtering (Requires Authentication)
GET http://localhost:3000/inventory-transactions?transactionType=Adjustment&product=67f8ec8aaf6bfc397a056b7f&fromDate=2023-01-01&toDate=2023-12-31&page=1&limit=10
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Get Inventory Transaction by MongoDB ID (Requires Authentication)
GET http://localhost:3000/inventory-transactions/67f8f859e9967a65f1ad29e1
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Get Inventory Transaction by Transaction ID (Requires Authentication)
GET http://localhost:3000/inventory-transactions/transactionID/IT-00001
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Get Inventory Transactions by Product (Requires Authentication)
GET http://localhost:3000/inventory-transactions/product/67f8ec8aaf6bfc397a056b7f
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Get Inventory Transactions by Warehouse (Requires Authentication)
GET http://localhost:3000/inventory-transactions/warehouse/67f8e3c85b1777f2f72ac8e9
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Create New Inventory Transaction - Adjustment (Requires Authentication)
POST http://localhost:3000/inventory-transactions
Content-Type: application/json
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

{
  "inventory": "67f8f19c967f8b21cb2ae9c5",
  "product": "67f8ec8aaf6bfc397a056b7f",
  "warehouse": "67f8e3c85b1777f2f72ac8e9",
  "transactionType": "Adjustment",
  "quantityBefore": 10,
  "quantityChange": 9,
  "notes": "Adjustment due to physical count"
}

### Create New Inventory Transaction - Purchase (Requires Authentication)
POST http://localhost:3000/inventory-transactions
Content-Type: application/json
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

{
  "inventory": "67f8cdc8f72a040e609a5ca8",
  "product": "67f8ec8aaf6bfc397a056b7f",
  "warehouse": "67f8e3c85b1777f2f72ac8e9",
  "transactionType": "Purchase",
  "quantityBefore": 15,
  "quantityChange": 10,
  "reference": {
    "documentType": "Purchase",
    "documentId": "67f66c737ed7ddb60e54af70",
    "documentCode": "PU-00003"
  },
  "notes": "Stock received from supplier"
}

### Create New Inventory Transaction - Sale (Requires Authentication)
POST http://localhost:3000/inventory-transactions
Content-Type: application/json
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

{
  "inventory": "67f8cdc8f72a040e609a5ca8",
  "product": "67f8ec8aaf6bfc397a056b7f",
  "warehouse": "67f8e3c85b1777f2f72ac8e9",
  "transactionType": "Sale",
  "quantityBefore": 25,
  "quantityChange": -2,
  "reference": {
    "documentType": "Order",
    "documentId": "67f67b829d34cfbe039e94bd",
    "documentCode": "OR-00002"
  },
  "notes": "Order fulfillment"
}

### Create New Inventory Transaction - Transfer (Requires Authentication)
POST http://localhost:3000/inventory-transactions
Content-Type: application/json
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

{
  "inventory": "67f8cdc8f72a040e609a5ca8",
  "product": "67f8ec8aaf6bfc397a056b7f",
  "warehouse": "67f8e3c85b1777f2f72ac8e9",
  "transactionType": "Transfer Out",
  "quantityBefore": 23,
  "quantityChange": -5,
  "fromWarehouse": "67f8e3c85b1777f2f72ac8e9",
  "toWarehouse": "67f8e3c85b1777f2f72ac8ea",
  "notes": "Stock transfer to North warehouse"
}

### Delete Inventory Transaction (Requires Authentication)
DELETE http://localhost:3000/inventory-transactions/67f8cdc8f72a040e609a5ca8
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

### Delete All Inventory Transactions (Requires Authentication)
DELETE http://localhost:3000/inventory-transactions
Authorization: Bearer YOUR_ACCESS_TOKEN  # Replace YOUR_ACCESS_TOKEN

