{
  "openapi": "3.0.0",
  "info": {
    "title": "Inventory Management API",
    "version": "1.0.0",
    "description": "CSE 341 Final project - Team 14 - API documentation for the Inventory Management project",
    "contact": {
      "name": "API Support",
      "email": "support@smartfarm.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development server"
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "Authentication endpoints"
    },
    {
      "name": "Users",
      "description": "User management endpoints"
    },
    {
      "name": "Products",
      "description": "Product management endpoints"
    },
    {
      "name": "Suppliers",
      "description": "Supplier management endpoints"
    },
    {
      "name": "Orders",
      "description": "Order management endpoints"
    },
    {
      "name": "Customers",
      "description": "Customer management endpoints"
    },
    {
      "name": "Purchases",
      "description": "Purchase management endpoints"
    },
    {
      "name": "Inventory",
      "description": "Inventory management endpoints"
    },
    {
      "name": "Warehouses",
      "description": "Warehouse management endpoints"
    },
    {
      "name": "Inventory Transactions",
      "description": "Inventory transaction endpoints"
    },
    {
      "name": "Inventory Transfers",
      "description": "Inventory transfer endpoints"
    },
    {
      "name": "Inventory Returns",
      "description": "Inventory return endpoints"
    },
    {
      "name": "Inventory Adjustments",
      "description": "Inventory adjustment endpoints"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Enter your JWT token in the format \"Bearer {token}\""
      }
    },
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "message": {
            "type": "string",
            "example": "Operation failed",
            "description": "Brief description of the error"
          },
          "error": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Validation failed",
              "Username already exists"
            ],
            "description": "Detailed error messages"
          },
          "errorCode": {
            "type": "string",
            "example": "VALIDATION_ERROR",
            "description": "Error code for programmatic handling",
            "enum": [
              "VALIDATION_ERROR",
              "AUTH_ERROR",
              "NOT_FOUND_ERROR",
              "SERVER_ERROR",
              "DATABASE_ERROR",
              "FORBIDDEN_ERROR",
              "CONFLICT_ERROR",
              "RATE_LIMIT_ERROR"
            ]
          },
          "statusCode": {
            "type": "number",
            "example": 400,
            "description": "HTTP status code"
          }
        }
      },
      "Success": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Operation successful",
            "description": "Brief description of the successful operation"
          },
          "data": {
            "type": "object",
            "description": "Result data from the operation"
          }
        }
      },
      "User": {
        "type": "object",
        "required": [
          "userID",
          "username",
          "email",
          "password",
          "fullName",
          "role"
        ],
        "properties": {
          "userID": {
            "type": "string",
            "pattern": "^USR-\\d{5}$",
            "example": "USR-00001",
            "description": "Unique identifier for the user in format USR-XXXXX"
          },
          "username": {
            "type": "string",
            "minLength": 3,
            "maxLength": 30,
            "pattern": "^(?!\\d)[a-zA-Z0-9_]+$",
            "example": "johnsmith",
            "description": "Unique username (3-30 chars, alphanumeric and underscores, can't start with number)"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com",
            "description": "Unique email address for the user"
          },
          "password": {
            "type": "string",
            "format": "password",
            "minLength": 8,
            "maxLength": 50,
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,50}$",
            "example": "SecurePass123!",
            "description": "Password (8-50 chars, must include lowercase, uppercase, number, special character)"
          },
          "fullName": {
            "type": "string",
            "minLength": 2,
            "maxLength": 100,
            "example": "John Smith",
            "description": "User's full name (2-100 characters)"
          },
          "avatar": {
            "type": "string",
            "format": "uri",
            "example": "https://example.com/avatars/user123.jpg",
            "description": "URL to user's avatar image"
          },
          "role": {
            "type": "string",
            "enum": [
              "USER",
              "SUPERVISOR",
              "MANAGER",
              "ADMIN",
              "SUPERADMIN"
            ],
            "example": "USER",
            "description": "User's role (affects permissions, higher roles inherit permissions from lower ones)"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "read:users",
              "write:products"
            ],
            "description": "Array of specific permissions granted to this user"
          },
          "isActive": {
            "type": "boolean",
            "example": true,
            "description": "Whether the user account is active"
          },
          "isVerified": {
            "type": "boolean",
            "example": false,
            "description": "Whether the user's email has been verified"
          },
          "lastLogin": {
            "type": "string",
            "format": "date-time",
            "example": "2023-04-17T14:30:00Z",
            "description": "When the user last logged in"
          },
          "rateLimitExemptUntil": {
            "type": "string",
            "format": "date-time",
            "example": "2023-04-18T14:30:00Z",
            "description": "Date until which the user is exempt from rate limiting"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-31T14:30:00Z",
            "description": "When the user was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-04-17T14:30:00Z",
            "description": "When the user was last updated"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "example": "64f5a7b3c5dc0d34f85d969e",
            "description": "MongoDB ObjectID of the user"
          },
          "userID": {
            "type": "string",
            "example": "USR-00001",
            "description": "Unique identifier for the user in format USR-XXXXX"
          },
          "username": {
            "type": "string",
            "example": "johnsmith",
            "description": "User's username"
          },
          "email": {
            "type": "string",
            "example": "user@example.com",
            "description": "User's email address"
          },
          "fullName": {
            "type": "string",
            "example": "John Smith",
            "description": "User's full name"
          },
          "avatar": {
            "type": "string",
            "example": "https://example.com/avatars/user123.jpg",
            "description": "URL to user's avatar image"
          },
          "role": {
            "type": "string",
            "example": "USER",
            "description": "User's role"
          },
          "isActive": {
            "type": "boolean",
            "example": true,
            "description": "Whether the user account is active"
          },
          "isVerified": {
            "type": "boolean",
            "example": false,
            "description": "Whether the user's email has been verified"
          },
          "lastLogin": {
            "type": "string",
            "format": "date-time",
            "description": "When the user last logged in"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the user was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the user was last updated"
          }
        }
      },
      "UserInput": {
        "type": "object",
        "required": [
          "username",
          "email",
          "password",
          "fullName"
        ],
        "properties": {
          "username": {
            "type": "string",
            "minLength": 3,
            "maxLength": 30,
            "pattern": "^(?!\\d)[a-zA-Z0-9_]+$",
            "example": "johnsmith",
            "description": "Unique username (3-30 chars, alphanumeric and underscores, can't start with number)"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com",
            "description": "Unique email address for the user"
          },
          "password": {
            "type": "string",
            "format": "password",
            "minLength": 8,
            "maxLength": 50,
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,50}$",
            "example": "SecurePass123!",
            "description": "Password (8-50 chars, must include lowercase, uppercase, number, special character)"
          },
          "fullName": {
            "type": "string",
            "minLength": 2,
            "maxLength": 100,
            "example": "John Smith",
            "description": "User's full name (2-100 characters)"
          },
          "avatar": {
            "type": "string",
            "format": "uri",
            "example": "https://example.com/avatars/user123.jpg",
            "description": "URL to user's avatar image"
          },
          "role": {
            "type": "string",
            "enum": [
              "USER",
              "SUPERVISOR",
              "MANAGER",
              "ADMIN"
            ],
            "example": "USER",
            "description": "User's role (SUPERADMIN can only be assigned by special processes)"
          }
        }
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "minLength": 3,
            "maxLength": 30,
            "pattern": "^(?!\\d)[a-zA-Z0-9_]+$",
            "example": "johnsmith_updated",
            "description": "Updated username"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "updated@example.com",
            "description": "Updated email address (must be unique)"
          },
          "fullName": {
            "type": "string",
            "minLength": 2,
            "maxLength": 100,
            "example": "John Smith Updated",
            "description": "Updated full name"
          },
          "avatar": {
            "type": "string",
            "format": "uri",
            "example": "https://example.com/avatars/user123_new.jpg",
            "description": "Updated avatar URL"
          },
          "role": {
            "type": "string",
            "enum": [
              "USER",
              "SUPERVISOR",
              "MANAGER",
              "ADMIN"
            ],
            "example": "SUPERVISOR",
            "description": "Updated role (restricted based on requestor's own role)"
          },
          "isActive": {
            "type": "boolean",
            "example": true,
            "description": "Updated active status"
          }
        }
      },
      "UsersList": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserResponse"
            },
            "description": "Array of users matching the query criteria"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination",
            "description": "Pagination information"
          }
        }
      },
      "PasswordChange": {
        "type": "object",
        "required": [
          "currentPassword",
          "newPassword",
          "confirmPassword"
        ],
        "properties": {
          "currentPassword": {
            "type": "string",
            "format": "password",
            "example": "OldPassword123!",
            "description": "User's current password"
          },
          "newPassword": {
            "type": "string",
            "format": "password",
            "minLength": 8,
            "maxLength": 50,
            "pattern": "^(?=.*[a-z])(?=.*[a-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,50}$",
            "example": "NewPassword456!",
            "description": "New password (must meet complexity requirements)"
          },
          "confirmPassword": {
            "type": "string",
            "format": "password",
            "example": "NewPassword456!",
            "description": "Confirmation of new password (must match newPassword)"
          }
        }
      },
      "RateLimitRevocation": {
        "type": "object",
        "required": [
          "ipAddress"
        ],
        "properties": {
          "ipAddress": {
            "type": "string",
            "format": "ipv4",
            "example": "192.168.1.100",
            "description": "IP address to exempt from rate limiting"
          },
          "reason": {
            "type": "string",
            "example": "User experiencing temporary high API usage for legitimate purposes",
            "description": "Reason for the rate limit exemption"
          },
          "durationHours": {
            "type": "integer",
            "minimum": 1,
            "maximum": 168,
            "default": 24,
            "example": 24,
            "description": "Number of hours to exempt the user from rate limits (default: 24, max: 168)"
          }
        }
      },
      "Supplier": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "supplierID": {
            "type": "string",
            "example": "SP-00001"
          },
          "name": {
            "type": "string",
            "example": "TechSupply Co"
          },
          "contact": {
            "type": "object",
            "properties": {
              "phone": {
                "type": "string",
                "example": "1234567890"
              },
              "email": {
                "type": "string",
                "example": "contact@techsupply.com"
              }
            }
          },
          "address": {
            "type": "object",
            "properties": {
              "street": {
                "type": "string",
                "example": "123 Tech Street"
              },
              "city": {
                "type": "string",
                "example": "San Francisco"
              },
              "state": {
                "type": "string",
                "example": "CA"
              },
              "postalCode": {
                "type": "string",
                "example": "94107"
              },
              "country": {
                "type": "string",
                "example": "USA"
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SupplierInput": {
        "type": "object",
        "required": [
          "name",
          "contact"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "TechSupply Co"
          },
          "contact": {
            "type": "object",
            "properties": {
              "phone": {
                "type": "string",
                "example": "1234567890"
              },
              "email": {
                "type": "string",
                "example": "contact@techsupply.com"
              }
            }
          },
          "address": {
            "type": "object",
            "properties": {
              "street": {
                "type": "string",
                "example": "123 Tech Street"
              },
              "city": {
                "type": "string",
                "example": "San Francisco"
              },
              "state": {
                "type": "string",
                "example": "CA"
              },
              "postalCode": {
                "type": "string",
                "example": "94107"
              },
              "country": {
                "type": "string",
                "example": "USA"
              }
            }
          }
        }
      },
      "SupplierUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "TechSupply Corporation"
          },
          "contact": {
            "type": "object",
            "properties": {
              "phone": {
                "type": "string",
                "example": "9876543210"
              },
              "email": {
                "type": "string",
                "example": "info@techsupply.com"
              }
            }
          },
          "address": {
            "type": "object",
            "properties": {
              "street": {
                "type": "string",
                "example": "456 Tech Avenue"
              },
              "city": {
                "type": "string",
                "example": "San Francisco"
              },
              "state": {
                "type": "string",
                "example": "CA"
              },
              "postalCode": {
                "type": "string",
                "example": "94108"
              },
              "country": {
                "type": "string",
                "example": "USA"
              }
            }
          }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "productID": {
            "type": "string",
            "example": "PR-00001"
          },
          "name": {
            "type": "string",
            "example": "MacBook Pro M3"
          },
          "description": {
            "type": "string",
            "example": "Latest MacBook Pro with M3 chip"
          },
          "price": {
            "type": "number",
            "example": 1999.99
          },
          "quantity": {
            "type": "integer",
            "example": 10
          },
          "category": {
            "type": "string",
            "example": "Electronics"
          },
          "supplier": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Supplier"
              }
            ]
          },
          "sku": {
            "type": "string",
            "example": "APPL123456"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "example": 50
          },
          "page": {
            "type": "integer",
            "example": 1
          },
          "limit": {
            "type": "integer",
            "example": 10
          },
          "totalPages": {
            "type": "integer",
            "example": 5
          }
        }
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Access token is missing or invalid",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error",
              "example": {
                "success": false,
                "message": "Authentication failed",
                "error": [
                  "Invalid or expired token"
                ],
                "errorCode": "AUTH_ERROR",
                "statusCode": 401
              }
            }
          }
        }
      },
      "NotFoundError": {
        "description": "The specified resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error",
              "example": {
                "success": false,
                "message": "Not found",
                "error": [
                  "The requested resource was not found"
                ],
                "errorCode": "NOT_FOUND_ERROR",
                "statusCode": 404
              }
            }
          }
        }
      },
      "ValidationError": {
        "description": "Validation error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error",
              "example": {
                "success": false,
                "message": "Validation failed",
                "error": [
                  "Username must be at least 3 characters",
                  "Invalid email format"
                ],
                "errorCode": "VALIDATION_ERROR",
                "statusCode": 400
              }
            }
          }
        }
      },
      "ServerError": {
        "description": "Internal Server Error - The server encountered an unexpected condition that prevented it from fulfilling the request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Server Error"
                },
                "error": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "An unexpected error occurred"
                  ]
                },
                "errorCode": {
                  "type": "string",
                  "example": "SERVER_ERROR"
                },
                "statusCode": {
                  "type": "number",
                  "example": 500
                }
              }
            }
          }
        }
      },
      "BadRequest": {
        "description": "Bad Request - The request could not be understood or was missing required parameters",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Bad Request"
                },
                "error": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "Validation error: Name is required"
                  ]
                },
                "errorCode": {
                  "type": "string",
                  "example": "BAD_REQUEST"
                },
                "statusCode": {
                  "type": "number",
                  "example": 400
                }
              }
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized - Authentication is required and has failed or has not been provided",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Unauthorized"
                },
                "error": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "Authentication required"
                  ]
                },
                "errorCode": {
                  "type": "string",
                  "example": "UNAUTHORIZED"
                },
                "statusCode": {
                  "type": "number",
                  "example": 401
                }
              }
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden - The server understood the request but refuses to authorize it",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Forbidden"
                },
                "error": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "You do not have permission to access this resource"
                  ]
                },
                "errorCode": {
                  "type": "string",
                  "example": "FORBIDDEN"
                },
                "statusCode": {
                  "type": "number",
                  "example": 403
                }
              }
            }
          }
        }
      },
      "NotFound": {
        "description": "Not Found - The requested resource could not be found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Not Found"
                },
                "error": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "The requested resource was not found"
                  ]
                },
                "errorCode": {
                  "type": "string",
                  "example": "NOT_FOUND"
                },
                "statusCode": {
                  "type": "number",
                  "example": 404
                }
              }
            }
          }
        }
      },
      "Conflict": {
        "description": "Conflict - The request conflicts with the current state of the resource",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Conflict"
                },
                "error": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "Username already exists",
                    "Email already in use"
                  ]
                },
                "errorCode": {
                  "type": "string",
                  "example": "CONFLICT"
                },
                "statusCode": {
                  "type": "number",
                  "example": 409
                }
              }
            }
          }
        }
      },
      "TooManyRequests": {
        "description": "Too Many Requests - Rate limit exceeded",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Too Many Requests"
                },
                "error": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "Rate limit exceeded. Try again later."
                  ]
                },
                "retryAfter": {
                  "type": "number",
                  "example": 60,
                  "description": "Time in seconds until rate limit is reset"
                },
                "errorCode": {
                  "type": "string",
                  "example": "RATE_LIMIT_EXCEEDED"
                },
                "statusCode": {
                  "type": "number",
                  "example": 429
                }
              }
            }
          }
        }
      }
    }
  },
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Register new user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password",
                  "username",
                  "fullName"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "type": "string",
                    "format": "password"
                  },
                  "username": {
                    "type": "string"
                  },
                  "fullName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "409": {
            "description": "Duplicate entry",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "properties": {
                        "error": {
                          "example": [
                            "Email already exists",
                            "Username already taken"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Login user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "type": "string",
                    "format": "password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Logout user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logged out successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/auth/github": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "GitHub OAuth login",
        "description": "Initiates GitHub OAuth flow",
        "responses": {
          "302": {
            "description": "Redirects to GitHub authorization"
          }
        }
      }
    },
    "/auth/github/callback": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "GitHub OAuth callback",
        "responses": {
          "302": {
            "description": "Redirects to dashboard on success, login page on failure"
          },
          "400": {
            "description": "OAuth error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/users/profile": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get current user's profile",
        "description": "Returns the profile information of the currently authenticated user. Available to all authenticated users regardless of role.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "example": {
                  "success": true,
                  "message": "User profile retrieved successfully",
                  "data": {
                    "userID": "USR-00001",
                    "username": "johnsmith",
                    "email": "john.smith@example.com",
                    "fullName": "John Smith",
                    "role": "USER",
                    "isActive": true,
                    "isVerified": true,
                    "lastLogin": "2023-04-17T10:30:45Z",
                    "createdAt": "2022-10-15T08:10:22Z",
                    "updatedAt": "2023-04-17T10:30:45Z"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError",
            "description": "Authentication token is missing, invalid, or expired"
          },
          "500": {
            "$ref": "#/components/responses/ServerError",
            "description": "An unexpected error occurred on the server"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update current user's profile",
        "description": "Updates the profile of the currently authenticated user. All authenticated users can update their own profiles, but with restrictions based on role:\n- USER/SUPERVISOR: Can update personal details but not role\n- MANAGER: Can update personal details and request role change up to MANAGER\n- ADMIN/SUPERADMIN: Full update capabilities",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              },
              "examples": {
                "basicUpdate": {
                  "summary": "Basic profile update",
                  "value": {
                    "fullName": "John Smith Jr.",
                    "avatar": "https://example.com/avatars/johnsmith_new.jpg"
                  }
                },
                "fullUpdate": {
                  "summary": "Full profile update (admin only)",
                  "value": {
                    "username": "johnsmith_updated",
                    "email": "john.smith.updated@example.com",
                    "fullName": "John Smith Jr.",
                    "avatar": "https://example.com/avatars/johnsmith_new.jpg",
                    "role": "SUPERVISOR",
                    "isActive": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "example": {
                  "success": true,
                  "message": "User profile updated successfully",
                  "data": {
                    "userID": "USR-00001",
                    "username": "johnsmith_updated",
                    "email": "john.smith.updated@example.com",
                    "fullName": "John Smith Jr.",
                    "avatar": "https://example.com/avatars/johnsmith_new.jpg",
                    "role": "SUPERVISOR",
                    "isActive": true,
                    "isVerified": true,
                    "lastLogin": "2023-04-17T10:30:45Z",
                    "createdAt": "2022-10-15T08:10:22Z",
                    "updatedAt": "2023-04-17T11:45:30Z"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError",
            "description": "Validation error in request body (e.g., invalid email format, username too short)"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError",
            "description": "Authentication token is missing, invalid, or expired"
          },
          "403": {
            "description": "Forbidden - insufficient permissions for requested update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "message": "Forbidden",
                  "error": [
                    "You cannot change to a role higher than your current role"
                  ],
                  "errorCode": "FORBIDDEN_ERROR",
                  "statusCode": 403
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Username or email already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "message": "Conflict",
                  "error": [
                    "Email address is already in use"
                  ],
                  "errorCode": "CONFLICT_ERROR",
                  "statusCode": 409
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError",
            "description": "An unexpected error occurred on the server"
          }
        }
      }
    },
    "/users/{userID}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user by ID",
        "description": "Retrieves a user by their userID (USR-XXXXX format). Access is role-based:\n- USER: Can only access their own profile\n- SUPERVISOR: Can access profiles of USERs in their department\n- MANAGER: Can access profiles of SUPERVISORs and USERs\n- ADMIN/SUPERADMIN: Can access all user profiles",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^USR-\\d{5}$"
            },
            "description": "User ID in USR-XXXXX format"
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "example": {
                  "success": true,
                  "message": "User retrieved successfully",
                  "data": {
                    "userID": "USR-00001",
                    "username": "johnsmith",
                    "email": "john.smith@example.com",
                    "fullName": "John Smith",
                    "role": "USER",
                    "isActive": true,
                    "isVerified": true,
                    "lastLogin": "2023-04-17T10:30:45Z",
                    "createdAt": "2022-10-15T08:10:22Z",
                    "updatedAt": "2023-04-17T10:30:45Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid user ID format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "message": "Validation failed",
                  "error": [
                    "User ID should be in the format USR-XXXXX where X is a digit"
                  ],
                  "errorCode": "VALIDATION_ERROR",
                  "statusCode": 400
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError",
            "description": "Authentication token is missing, invalid, or expired"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to access this user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "message": "Forbidden",
                  "error": [
                    "You do not have permission to view this user profile"
                  ],
                  "errorCode": "FORBIDDEN_ERROR",
                  "statusCode": 403
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError",
            "description": "User with the specified ID was not found"
          },
          "500": {
            "$ref": "#/components/responses/ServerError",
            "description": "An unexpected error occurred on the server"
          }
        }
      }
    },
    "/users/email/{email}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user by email",
        "description": "Retrieves a user by their email address. Access is role-based:\n- USER: Can only access their own profile\n- SUPERVISOR: Can access profiles of USERs in their department\n- MANAGER: Can access profiles of SUPERVISORs and USERs\n- ADMIN/SUPERADMIN: Can access all user profiles",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "email"
            },
            "description": "Email address of the user to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "example": {
                  "success": true,
                  "message": "User retrieved successfully",
                  "data": {
                    "userID": "USR-00001",
                    "username": "johnsmith",
                    "email": "john.smith@example.com",
                    "fullName": "John Smith",
                    "role": "USER",
                    "isActive": true,
                    "isVerified": true,
                    "lastLogin": "2023-04-17T10:30:45Z",
                    "createdAt": "2022-10-15T08:10:22Z",
                    "updatedAt": "2023-04-17T10:30:45Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid email format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "message": "Validation failed",
                  "error": [
                    "Invalid email format"
                  ],
                  "errorCode": "VALIDATION_ERROR",
                  "statusCode": 400
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError",
            "description": "Authentication token is missing, invalid, or expired"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to access this user's data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "message": "Forbidden",
                  "error": [
                    "You do not have permission to view this user profile"
                  ],
                  "errorCode": "FORBIDDEN_ERROR",
                  "statusCode": 403
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError",
            "description": "No user found with the provided email address"
          },
          "500": {
            "$ref": "#/components/responses/ServerError",
            "description": "An unexpected error occurred on the server"
          }
        }
      }
    },
    "/users/username/{username}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user by username",
        "description": "Retrieves a user by their username. Access is role-based:\n- USER: Can only access their own profile\n- SUPERVISOR: Can access profiles of USERs in their department\n- MANAGER: Can access profiles of SUPERVISORs and USERs\n- ADMIN/SUPERADMIN: Can access all user profiles",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_]+$",
              "minLength": 3,
              "maxLength": 30
            },
            "description": "Username of the user to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "example": {
                  "success": true,
                  "message": "User retrieved successfully",
                  "data": {
                    "userID": "USR-00001",
                    "username": "johnsmith",
                    "email": "john.smith@example.com",
                    "fullName": "John Smith",
                    "role": "USER",
                    "isActive": true,
                    "isVerified": true,
                    "lastLogin": "2023-04-17T10:30:45Z",
                    "createdAt": "2022-10-15T08:10:22Z",
                    "updatedAt": "2023-04-17T10:30:45Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid username format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "message": "Validation failed",
                  "error": [
                    "Username must be alphanumeric with underscores only"
                  ],
                  "errorCode": "VALIDATION_ERROR",
                  "statusCode": 400
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError",
            "description": "Authentication token is missing, invalid, or expired"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to access this user's data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "message": "Forbidden",
                  "error": [
                    "You do not have permission to view this user profile"
                  ],
                  "errorCode": "FORBIDDEN_ERROR",
                  "statusCode": 403
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError",
            "description": "No user found with the provided username"
          },
          "500": {
            "$ref": "#/components/responses/ServerError",
            "description": "An unexpected error occurred on the server"
          }
        }
      }
    },
    "/users/search": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Search for users",
        "description": "Search for users by a text term that matches against usernames, email addresses, or full names. Access is role-based:\n- USER: Results limited to themselves\n- SUPERVISOR: Results limited to themselves and USERs in their department\n- MANAGER: Results limited to themselves, SUPERVISORs, and USERs\n- ADMIN/SUPERADMIN: Full access to all users",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "term",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 2,
              "maxLength": 50
            },
            "description": "Search term (min 2 chars, max 50)"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "description": "Page number for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "description": "Number of results per page"
          }
        ],
        "responses": {
          "200": {
            "description": "Search results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersList"
                },
                "example": {
                  "success": true,
                  "message": "Found 2 users matching \"john\"",
                  "data": {
                    "users": [
                      {
                        "userID": "USR-00001",
                        "username": "johnsmith",
                        "email": "john.smith@example.com",
                        "fullName": "John Smith",
                        "role": "USER",
                        "isActive": true
                      },
                      {
                        "userID": "USR-00018",
                        "username": "johnbrown",
                        "email": "john.brown@example.com",
                        "fullName": "John Brown",
                        "role": "SUPERVISOR",
                        "isActive": true
                      }
                    ],
                    "pagination": {
                      "total": 2,
                      "page": 1,
                      "limit": 10,
                      "totalPages": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError",
            "description": "Invalid search parameters (e.g., term too short)"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError",
            "description": "Authentication token is missing, invalid, or expired"
          },
          "403": {
            "description": "Insufficient permissions to perform this search",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "message": "Forbidden",
                  "error": [
                    "You do not have permission to search all users"
                  ],
                  "errorCode": "FORBIDDEN_ERROR",
                  "statusCode": 403
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError",
            "description": "An unexpected error occurred on the server"
          }
        }
      }
    },
    "/users/role/{role}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get users by role",
        "description": "Retrieves users filtered by role. Access is role-based and hierarchical:\n- USER: Cannot access this endpoint\n- SUPERVISOR: Can only view USERs\n- MANAGER: Can view USERs and SUPERVISORs\n- ADMIN: Can view USERs, SUPERVISORs, and MANAGERs\n- SUPERADMIN: Can view all roles",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "role",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "USER",
                "SUPERVISOR",
                "MANAGER",
                "ADMIN",
                "SUPERADMIN"
              ]
            },
            "description": "Role to filter by"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "description": "Page number for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "description": "Number of results per page"
          }
        ],
        "responses": {
          "200": {
            "description": "Users found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersList"
                },
                "example": {
                  "success": true,
                  "message": "Users retrieved successfully",
                  "data": {
                    "users": [
                      {
                        "userID": "USR-00001",
                        "username": "johnsmith",
                        "email": "john.smith@example.com",
                        "fullName": "John Smith",
                        "role": "USER",
                        "isActive": true
                      },
                      {
                        "userID": "USR-00005",
                        "username": "annalee",
                        "email": "anna.lee@example.com",
                        "fullName": "Anna Lee",
                        "role": "USER",
                        "isActive": true
                      }
                    ],
                    "pagination": {
                      "total": 45,
                      "page": 1,
                      "limit": 10,
                      "totalPages": 5
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError",
            "description": "Invalid role specified"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError",
            "description": "Authentication token is missing, invalid, or expired"
          },
          "403": {
            "description": "Insufficient permissions to view users with this role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "message": "Forbidden",
                  "error": [
                    "You do not have permission to view users with ADMIN role"
                  ],
                  "errorCode": "FORBIDDEN_ERROR",
                  "statusCode": 403
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError",
            "description": "An unexpected error occurred on the server"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all users",
        "description": "Retrieves a paginated list of all users. Access is role-based:\n- USER: Cannot access this endpoint\n- SUPERVISOR: Results limited to themselves and USERs in their department\n- MANAGER: Results limited to themselves, SUPERVISORs, and USERs\n- ADMIN/SUPERADMIN: Full access to all users",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "description": "Page number for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "description": "Number of results per page"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "username",
                "email",
                "role",
                "createdAt",
                "lastLogin"
              ],
              "default": "username"
            },
            "description": "Field to sort by"
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "Sort order (ascending or descending)"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "object"
            },
            "description": "Filter criteria (format: field=value)",
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": "List of all users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Users retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "users": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/UserResponse"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "success": true,
                  "message": "Users retrieved successfully",
                  "data": {
                    "users": [
                      {
                        "userID": "USR-00001",
                        "username": "johnsmith",
                        "email": "john.smith@example.com",
                        "fullName": "John Smith",
                        "role": "USER",
                        "isActive": true,
                        "createdAt": "2023-01-15T08:30:00Z",
                        "updatedAt": "2023-04-10T14:15:30Z"
                      },
                      {
                        "userID": "USR-00002",
                        "username": "janedoe",
                        "email": "jane.doe@example.com",
                        "fullName": "Jane Doe",
                        "role": "SUPERVISOR",
                        "isActive": true,
                        "createdAt": "2023-01-16T09:45:00Z",
                        "updatedAt": "2023-04-12T11:20:15Z"
                      }
                    ],
                    "pagination": {
                      "total": 42,
                      "page": 1,
                      "limit": 10,
                      "totalPages": 5
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "message": "Validation failed",
                  "error": [
                    "Invalid sort field specified"
                  ],
                  "errorCode": "VALIDATION_ERROR",
                  "statusCode": 400
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError",
            "description": "Authentication token is missing, invalid, or expired"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to list users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "message": "Forbidden",
                  "error": [
                    "Insufficient permissions to list all users"
                  ],
                  "errorCode": "FORBIDDEN_ERROR",
                  "statusCode": 403
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError",
            "description": "An unexpected error occurred on the server"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete all users",
        "description": "Deletes all users from the system. This operation is extremely destructive and limited to SUPERADMIN role only.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "All users deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "example": {
                  "success": true,
                  "message": "All users deleted successfully",
                  "data": {
                    "deletedCount": 42
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError",
            "description": "Authentication token is missing, invalid, or expired"
          },
          "403": {
            "description": "Forbidden - Only SUPERADMIN can delete all users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "message": "Forbidden",
                  "error": [
                    "Only SUPERADMIN role can delete all users"
                  ],
                  "errorCode": "FORBIDDEN_ERROR",
                  "statusCode": 403
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError",
            "description": "An unexpected error occurred on the server"
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a new user (admin only)",
        "description": "Creates a new user in the system. Restricted to ADMIN and SUPERADMIN roles. Admins can create users with roles up to ADMIN, while SUPERADMIN can create any role.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInput"
              },
              "examples": {
                "basicUser": {
                  "summary": "Basic user creation",
                  "value": {
                    "username": "newuser",
                    "email": "newuser@example.com",
                    "password": "SecurePass123!",
                    "fullName": "New User",
                    "role": "USER"
                  }
                },
                "supervisorUser": {
                  "summary": "Supervisor creation",
                  "value": {
                    "username": "newsupervisor",
                    "email": "supervisor@example.com",
                    "password": "SuperPass456!",
                    "fullName": "New Supervisor",
                    "role": "SUPERVISOR",
                    "avatar": "https://example.com/avatars/supervisor.jpg"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "example": {
                  "success": true,
                  "message": "User created successfully",
                  "data": {
                    "userID": "USR-00050",
                    "username": "newuser",
                    "email": "newuser@example.com",
                    "fullName": "New User",
                    "role": "USER",
                    "isActive": true,
                    "isVerified": false,
                    "createdAt": "2023-04-17T15:30:45Z",
                    "updatedAt": "2023-04-17T15:30:45Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error in input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "invalidUsername": {
                    "summary": "Invalid username",
                    "value": {
                      "success": false,
                      "message": "Validation failed",
                      "error": [
                        "Username must be between 3 and 30 characters",
                        "Username must not start with a number"
                      ],
                      "errorCode": "VALIDATION_ERROR",
                      "statusCode": 400
                    }
                  },
                  "invalidEmail": {
                    "summary": "Invalid email format",
                    "value": {
                      "success": false,
                      "message": "Validation failed",
                      "error": [
                        "Invalid email format"
                      ],
                      "errorCode": "VALIDATION_ERROR",
                      "statusCode": 400
                    }
                  },
                  "passwordTooWeak": {
                    "summary": "Password too weak",
                    "value": {
                      "success": false,
                      "message": "Validation failed",
                      "error": [
                        "Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character"
                      ],
                      "errorCode": "VALIDATION_ERROR",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions or attempting to create a user with too high a role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "insufficientPermission": {
                    "summary": "Insufficient permission",
                    "value": {
                      "success": false,
                      "message": "Forbidden",
                      "error": [
                        "Only ADMIN or SUPERADMIN can create new users"
                      ],
                      "errorCode": "FORBIDDEN_ERROR",
                      "statusCode": 403
                    }
                  },
                  "roleTooHigh": {
                    "summary": "Role too high",
                    "value": {
                      "success": false,
                      "message": "Forbidden",
                      "error": [
                        "Cannot create a user with a role higher than your own"
                      ],
                      "errorCode": "FORBIDDEN_ERROR",
                      "statusCode": 403
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Username or email already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "usernameExists": {
                    "summary": "Username exists",
                    "value": {
                      "success": false,
                      "message": "Conflict",
                      "error": [
                        "Username already exists"
                      ],
                      "errorCode": "CONFLICT_ERROR",
                      "statusCode": 409
                    }
                  },
                  "emailExists": {
                    "summary": "Email exists",
                    "value": {
                      "success": false,
                      "message": "Conflict",
                      "error": [
                        "Email address already in use"
                      ],
                      "errorCode": "CONFLICT_ERROR",
                      "statusCode": 409
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/users/{user_Id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user by MongoDB ID",
        "description": "Retrieves a user by their MongoDB ID. Access is role-based:\n- USER: Can only access their own profile\n- SUPERVISOR: Can access profiles of USERs in their department\n- MANAGER: Can access profiles of SUPERVISORs and USERs\n- ADMIN/SUPERADMIN: Can access all user profiles",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "user_Id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongodb-id"
            },
            "description": "MongoDB ID of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "example": {
                  "success": true,
                  "message": "User retrieved successfully",
                  "data": {
                    "user_id": "64f5a7b3c5dc0d34f85d969e",
                    "userID": "USR-00001",
                    "username": "johnsmith",
                    "email": "john.smith@example.com",
                    "fullName": "John Smith",
                    "role": "USER",
                    "isActive": true,
                    "isVerified": true,
                    "lastLogin": "2023-04-17T10:30:45Z",
                    "createdAt": "2022-10-15T08:10:22Z",
                    "updatedAt": "2023-04-17T10:30:45Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid MongoDB ID format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "message": "Validation failed",
                  "error": [
                    "Invalid MongoDB ID format"
                  ],
                  "errorCode": "VALIDATION_ERROR",
                  "statusCode": 400
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to access this user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "message": "Forbidden",
                  "error": [
                    "You do not have permission to view this user profile"
                  ],
                  "errorCode": "FORBIDDEN_ERROR",
                  "statusCode": 403
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update user by MongoDB ID",
        "description": "Updates a user identified by MongoDB ID. Access is role-based and hierarchical:\n- USER: Can only update their own profile and cannot change their role\n- SUPERVISOR: Can update USERs in their department but cannot change roles\n- MANAGER: Can update SUPERVISORs and USERs, and promote USERs to SUPERVISOR\n- ADMIN: Can update any user except SUPERADMIN and change roles up to ADMIN\n- SUPERADMIN: Full update capabilities for any user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "user_Id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongodb-id"
            },
            "description": "MongoDB ID of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              },
              "examples": {
                "basicUpdate": {
                  "summary": "Basic user update",
                  "value": {
                    "fullName": "Updated Name",
                    "avatar": "https://example.com/avatars/updated.jpg"
                  }
                },
                "fullUpdate": {
                  "summary": "Full user update (admin only)",
                  "value": {
                    "username": "updated_username",
                    "email": "updated@example.com",
                    "fullName": "Updated Full Name",
                    "avatar": "https://example.com/avatars/updated.jpg",
                    "role": "SUPERVISOR",
                    "isActive": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "example": {
                  "success": true,
                  "message": "User updated successfully",
                  "data": {
                    "user_id": "64f5a7b3c5dc0d34f85d969e",
                    "userID": "USR-00001",
                    "username": "updated_username",
                    "email": "updated@example.com",
                    "fullName": "Updated Full Name",
                    "avatar": "https://example.com/avatars/updated.jpg",
                    "role": "SUPERVISOR",
                    "isActive": true,
                    "isVerified": true,
                    "updatedAt": "2023-04-17T15:45:30Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Validation error in input data or invalid MongoDB ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "invalidId": {
                    "summary": "Invalid MongoDB ID",
                    "value": {
                      "success": false,
                      "message": "Validation failed",
                      "error": [
                        "Invalid MongoDB ID format"
                      ],
                      "errorCode": "VALIDATION_ERROR",
                      "statusCode": 400
                    }
                  },
                  "invalidEmail": {
                    "summary": "Invalid email format",
                    "value": {
                      "success": false,
                      "message": "Validation failed",
                      "error": [
                        "Invalid email format"
                      ],
                      "errorCode": "VALIDATION_ERROR",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to update this user or their role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "insufficientPermission": {
                    "summary": "Insufficient permission",
                    "value": {
                      "success": false,
                      "message": "Forbidden",
                      "error": [
                        "You do not have permission to update this user"
                      ],
                      "errorCode": "FORBIDDEN_ERROR",
                      "statusCode": 403
                    }
                  },
                  "roleChangeNotAllowed": {
                    "summary": "Role change not allowed",
                    "value": {
                      "success": false,
                      "message": "Forbidden",
                      "error": [
                        "You cannot change a user to a role higher than your own"
                      ],
                      "errorCode": "FORBIDDEN_ERROR",
                      "statusCode": 403
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "409": {
            "description": "Conflict - Username or email already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "message": "Conflict",
                  "error": [
                    "Username already exists"
                  ],
                  "errorCode": "CONFLICT_ERROR",
                  "statusCode": 409
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete user by MongoDB ID",
        "description": "Deletes a user identified by MongoDB ID. Access is role-based and hierarchical:\n- USER: Cannot delete any user\n- SUPERVISOR: Can delete USERs in their department\n- MANAGER: Can delete SUPERVISORs and USERs\n- ADMIN: Can delete any user except other ADMINs and SUPERADMINs\n- SUPERADMIN: Can delete any user except other SUPERADMINs",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "user_Id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongodb-id"
            },
            "description": "MongoDB ID of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "example": {
                  "success": true,
                  "message": "User deleted successfully"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid MongoDB ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "message": "Validation failed",
                  "error": [
                    "Invalid MongoDB ID format"
                  ],
                  "errorCode": "VALIDATION_ERROR",
                  "statusCode": 400
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to delete this user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "message": "Forbidden",
                  "error": [
                    "You do not have permission to delete this user"
                  ],
                  "errorCode": "FORBIDDEN_ERROR",
                  "statusCode": 403
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/users/userID/{userID}/revoke-rate-limit": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Revoke rate limit for a user by userID",
        "description": "Temporarily exempts a user from API rate limits based on their userID. This operation requires ADMIN or SUPERADMIN role.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^USR-\\d{5}$"
            },
            "description": "User ID in USR-XXXXX format"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ipAddress": {
                    "type": "string",
                    "format": "ipv4",
                    "description": "IP address to exempt (optional, will use user's last login IP if not provided)"
                  },
                  "durationHours": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 168,
                    "default": 24,
                    "description": "Duration in hours for the exemption"
                  },
                  "reason": {
                    "type": "string",
                    "example": "User needs to perform batch operations temporarily",
                    "description": "Reason for the rate limit exemption"
                  }
                }
              },
              "example": {
                "ipAddress": "192.168.1.105",
                "durationHours": 48,
                "reason": "Processing large data import"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rate limit successfully revoked",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "example": {
                  "success": true,
                  "message": "Rate limit revoked successfully",
                  "data": {
                    "userId": "64f5a7b3c5dc0d34f85d969e",
                    "userID": "USR-00001",
                    "username": "johnsmith",
                    "exemptUntil": "2023-04-19T14:30:00Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid user ID format or invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "invalidUserID": {
                    "summary": "Invalid user ID",
                    "value": {
                      "success": false,
                      "message": "Validation failed",
                      "error": [
                        "User ID should be in the format USR-XXXXX where X is a digit"
                      ],
                      "errorCode": "VALIDATION_ERROR",
                      "statusCode": 400
                    }
                  },
                  "invalidIPAddress": {
                    "summary": "Invalid IP address",
                    "value": {
                      "success": false,
                      "message": "Validation failed",
                      "error": [
                        "Invalid IP address format"
                      ],
                      "errorCode": "VALIDATION_ERROR",
                      "statusCode": 400
                    }
                  },
                  "invalidDuration": {
                    "summary": "Invalid duration",
                    "value": {
                      "success": false,
                      "message": "Validation failed",
                      "error": [
                        "Duration must be between 1 and 168 hours"
                      ],
                      "errorCode": "VALIDATION_ERROR",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to revoke rate limits",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "message": "Forbidden",
                  "error": [
                    "Only ADMIN and SUPERADMIN can revoke rate limits"
                  ],
                  "errorCode": "FORBIDDEN_ERROR",
                  "statusCode": 403
                }
              }
            }
          },
          "404": {
            "description": "Not Found - User not found with the specified ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "message": "Not Found",
                  "error": [
                    "User not found with ID: USR-00999"
                  ],
                  "errorCode": "NOT_FOUND_ERROR",
                  "statusCode": 404
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/users/revoke-rate-limit/{user_Id}": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Revoke rate limit for a user by MongoDB ID",
        "description": "Temporarily exempts a user from API rate limits based on their MongoDB ID. This operation requires ADMIN or SUPERADMIN role.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "user_Id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongodb-id"
            },
            "description": "MongoDB ID of the user"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ipAddress": {
                    "type": "string",
                    "format": "ipv4",
                    "description": "IP address to exempt (optional, will use user's last login IP if not provided)"
                  },
                  "durationHours": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 168,
                    "default": 24,
                    "description": "Duration in hours for the exemption"
                  },
                  "reason": {
                    "type": "string",
                    "example": "User needs to perform batch operations temporarily",
                    "description": "Reason for the rate limit exemption"
                  }
                }
              },
              "example": {
                "ipAddress": "192.168.1.105",
                "durationHours": 48,
                "reason": "Processing large data import"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rate limit successfully revoked",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "example": {
                  "success": true,
                  "message": "Rate limit revoked successfully",
                  "data": {
                    "userId": "64f5a7b3c5dc0d34f85d969e",
                    "userID": "USR-00001",
                    "username": "johnsmith",
                    "exemptUntil": "2023-04-19T14:30:00Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid MongoDB ID format or invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "invalidMongoID": {
                    "summary": "Invalid MongoDB ID",
                    "value": {
                      "success": false,
                      "message": "Validation failed",
                      "error": [
                        "Invalid MongoDB ID format"
                      ],
                      "errorCode": "VALIDATION_ERROR",
                      "statusCode": 400
                    }
                  },
                  "invalidIPAddress": {
                    "summary": "Invalid IP address",
                    "value": {
                      "success": false,
                      "message": "Validation failed",
                      "error": [
                        "Invalid IP address format"
                      ],
                      "errorCode": "VALIDATION_ERROR",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to revoke rate limits",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "message": "Forbidden",
                  "error": [
                    "Only ADMIN and SUPERADMIN can revoke rate limits"
                  ],
                  "errorCode": "FORBIDDEN_ERROR",
                  "statusCode": 403
                }
              }
            }
          },
          "404": {
            "description": "Not Found - User not found with the specified MongoDB ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "message": "Not Found",
                  "error": [
                    "User not found with ID: 64f5a7b3c5dc0d34f85d969e"
                  ],
                  "errorCode": "NOT_FOUND_ERROR",
                  "statusCode": 404
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get all products",
        "description": "Retrieve a list of all products with optional filtering and pagination",
        "parameters": [
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string"
            },
            "description": "Filter products by category"
          },
          {
            "in": "query",
            "name": "minPrice",
            "schema": {
              "type": "number"
            },
            "description": "Filter products with price greater than or equal to this value"
          },
          {
            "in": "query",
            "name": "maxPrice",
            "schema": {
              "type": "number"
            },
            "description": "Filter products with price less than or equal to this value"
          },
          {
            "in": "query",
            "name": "inStock",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ]
            },
            "description": "Filter products that are in stock (quantity > 0)"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of records per page"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "description": "Sort fields (comma separated), prefix with - for descending order"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "products": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Product"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Create a new product",
        "description": "Create a new product in the system",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Product"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "Delete all products",
        "description": "Delete all products from the system (use with caution)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Products deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/products/search": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Search products",
        "description": "Search products by text",
        "parameters": [
          {
            "in": "query",
            "name": "term",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Search term"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Product"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/products/productID/{productID}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get product by product ID",
        "description": "Retrieve product details by product ID (PR-XXXXX format)",
        "parameters": [
          {
            "in": "path",
            "name": "productID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Product ID in PR-XXXXX format"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Product"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/products/category/{category}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get products by category",
        "description": "Retrieve products that belong to a specific category",
        "parameters": [
          {
            "in": "path",
            "name": "category",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Product category"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Product"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/products/supplier/{supplierId}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get products by supplier",
        "description": "Retrieve products that are supplied by a specific supplier",
        "parameters": [
          {
            "in": "path",
            "name": "supplierId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the supplier"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Product"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/products/{_id}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get product by ID",
        "description": "Retrieve product details by MongoDB ID",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the product"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Product"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Update product",
        "description": "Update product details by MongoDB ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the product to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Product"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "Delete product",
        "description": "Delete product by MongoDB ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the product to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Product deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/suppliers": {
      "get": {
        "tags": [
          "Suppliers"
        ],
        "summary": "Get all suppliers",
        "description": "Retrieve a list of all suppliers with optional filtering and pagination",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter suppliers by name"
          },
          {
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string"
            },
            "description": "Filter suppliers by country"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of records per page"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "description": "Sort fields (comma separated), prefix with - for descending order"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "suppliers": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Supplier"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Suppliers"
        ],
        "summary": "Create a new supplier",
        "description": "Create a new supplier in the system",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SupplierInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Supplier created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Supplier"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Suppliers"
        ],
        "summary": "Delete all suppliers",
        "description": "Delete all suppliers from the system (use with caution)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Suppliers deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/suppliers/search": {
      "get": {
        "tags": [
          "Suppliers"
        ],
        "summary": "Search suppliers",
        "description": "Search suppliers by name",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "term",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Search term"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Supplier"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/suppliers/supplierID/{supplierID}": {
      "get": {
        "tags": [
          "Suppliers"
        ],
        "summary": "Get supplier by supplier ID",
        "description": "Retrieve supplier details by supplier ID (SP-XXXXX format)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "supplierID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Supplier ID in SP-XXXXX format"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Supplier"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/suppliers/{_id}": {
      "get": {
        "tags": [
          "Suppliers"
        ],
        "summary": "Get supplier by ID",
        "description": "Retrieve supplier details by MongoDB ID",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the supplier"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Supplier"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Suppliers"
        ],
        "summary": "Update supplier",
        "description": "Update supplier details by MongoDB ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the supplier to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SupplierUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Supplier updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Supplier"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Suppliers"
        ],
        "summary": "Delete supplier",
        "description": "Delete supplier by MongoDB ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the supplier to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Supplier deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/orders": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get all orders",
        "description": "Retrieve a list of all orders with optional filtering and pagination",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "processing",
                "shipped",
                "delivered",
                "cancelled"
              ]
            },
            "description": "Filter orders by status"
          },
          {
            "in": "query",
            "name": "customer",
            "schema": {
              "type": "string"
            },
            "description": "Filter orders by customer ID"
          },
          {
            "in": "query",
            "name": "fromDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter orders with date greater than or equal to this value"
          },
          {
            "in": "query",
            "name": "toDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter orders with date less than or equal to this value"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of records per page"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "description": "Sort fields (comma separated), prefix with - for descending order"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "orders": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Order"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create a new order",
        "description": "Create a new order in the system",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Order"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Orders"
        ],
        "summary": "Delete all orders",
        "description": "Delete all orders from the system (use with caution)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Orders deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/orders/orderID/{orderID}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get order by order ID",
        "description": "Retrieve order details by order ID (OR-XXXXX format)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orderID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Order ID in OR-XXXXX format"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Order"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/orders/customer/{customerId}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get orders by customer",
        "description": "Retrieve orders for a specific customer",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the customer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Order"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/orders/status/{status}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get orders by status",
        "description": "Retrieve orders with a specific status",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "status",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "processing",
                "shipped",
                "delivered",
                "cancelled"
              ]
            },
            "description": "Order status"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Order"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/orders/{_id}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get order by ID",
        "description": "Retrieve order details by MongoDB ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the order"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Order"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Update order",
        "description": "Update order details by MongoDB ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the order to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Order"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Orders"
        ],
        "summary": "Delete order",
        "description": "Delete order by MongoDB ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the order to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Order deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/customers": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Get all customers",
        "description": "Retrieve a list of all customers with optional filtering and pagination",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter customers by name"
          },
          {
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            },
            "description": "Filter customers by email"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of records per page"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "description": "Sort fields (comma separated), prefix with - for descending order"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "customers": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Customer"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Create a new customer",
        "description": "Create a new customer in the system",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Customer created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Customer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Customers"
        ],
        "summary": "Delete all customers",
        "description": "Delete all customers from the system (use with caution)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Customers deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/customers/search": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Search customers",
        "description": "Search customers by name or email",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "term",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Search term"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Customer"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/customers/customerID/{customerID}": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Get customer by customer ID",
        "description": "Retrieve customer details by customer ID (CU-XXXXX format)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "customerID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Customer ID in CU-XXXXX format"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Customer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/customers/email/{email}": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Get customer by email",
        "description": "Retrieve customer details by email address",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Customer email address"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Customer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/customers/{_id}": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Get customer by ID",
        "description": "Retrieve customer details by MongoDB ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the customer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Customer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Customers"
        ],
        "summary": "Update customer",
        "description": "Update customer details by MongoDB ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the customer to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Customer updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Customer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Customers"
        ],
        "summary": "Delete customer",
        "description": "Delete customer by MongoDB ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the customer to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Customer deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/purchases": {
      "get": {
        "tags": [
          "Purchases"
        ],
        "summary": "Get all purchases",
        "description": "Retrieve a list of all purchases with optional filtering and pagination",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "ordered",
                "received",
                "cancelled",
                "returned"
              ]
            },
            "description": "Filter purchases by status"
          },
          {
            "in": "query",
            "name": "supplier",
            "schema": {
              "type": "string"
            },
            "description": "Filter purchases by supplier ID"
          },
          {
            "in": "query",
            "name": "paymentStatus",
            "schema": {
              "type": "string",
              "enum": [
                "unpaid",
                "partially_paid",
                "paid"
              ]
            },
            "description": "Filter purchases by payment status"
          },
          {
            "in": "query",
            "name": "fromDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter purchases with date greater than or equal to this value"
          },
          {
            "in": "query",
            "name": "toDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter purchases with date less than or equal to this value"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of records per page"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "description": "Sort fields (comma separated), prefix with - for descending order"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "purchases": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Purchase"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Purchases"
        ],
        "summary": "Create a new purchase",
        "description": "Create a new purchase in the system",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Purchase created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Purchase"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Purchases"
        ],
        "summary": "Delete all purchases",
        "description": "Delete all purchases from the system (use with caution)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Purchases deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/purchases/purchaseID/{purchaseID}": {
      "get": {
        "tags": [
          "Purchases"
        ],
        "summary": "Get purchase by purchase ID",
        "description": "Retrieve purchase details by purchase ID (PU-XXXXX format)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "purchaseID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Purchase ID in PU-XXXXX format"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Purchase"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/purchases/supplier/{supplierId}": {
      "get": {
        "tags": [
          "Purchases"
        ],
        "summary": "Get purchases by supplier",
        "description": "Retrieve purchases for a specific supplier",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "supplierId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the supplier"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Purchase"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/purchases/status/{status}": {
      "get": {
        "tags": [
          "Purchases"
        ],
        "summary": "Get purchases by status",
        "description": "Retrieve purchases with a specific status",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "status",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "ordered",
                "received",
                "cancelled",
                "returned"
              ]
            },
            "description": "Purchase status"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Purchase"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/purchases/{_id}": {
      "get": {
        "tags": [
          "Purchases"
        ],
        "summary": "Get purchase by ID",
        "description": "Retrieve purchase details by MongoDB ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the purchase"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Purchase"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Purchases"
        ],
        "summary": "Update purchase",
        "description": "Update purchase details by MongoDB ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the purchase to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Purchase updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Purchase"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Purchases"
        ],
        "summary": "Delete purchase",
        "description": "Delete purchase by MongoDB ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the purchase to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Purchase deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/inventory": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get all inventory items",
        "description": "Retrieve a list of all inventory items with optional filtering, sorting, and pagination",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "product",
            "schema": {
              "type": "string"
            },
            "description": "Filter by product ID"
          },
          {
            "in": "query",
            "name": "warehouse",
            "schema": {
              "type": "string"
            },
            "description": "Filter by warehouse ID"
          },
          {
            "in": "query",
            "name": "stockStatus",
            "schema": {
              "type": "string",
              "enum": [
                "In Stock",
                "Low Stock",
                "Out of Stock",
                "Overstock"
              ]
            },
            "description": "Filter by inventory stock status"
          },
          {
            "in": "query",
            "name": "minQuantity",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by minimum quantity available"
          },
          {
            "in": "query",
            "name": "maxQuantity",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by maximum quantity available"
          },
          {
            "in": "query",
            "name": "lastStockCheckFrom",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter items with last stock check after this date"
          },
          {
            "in": "query",
            "name": "lastStockCheckTo",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter items with last stock check before this date"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of records per page"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "default": "product"
            },
            "description": "Sort fields (comma separated), prefix with - for descending order"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "inventory": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Inventory"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create a new inventory item",
        "description": "Create a new inventory item record in the system",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Inventory item created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Inventory"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Inventory"
        ],
        "summary": "Delete all inventory items",
        "description": "Delete all inventory items from the system (use with caution)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "All inventory items deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/inventory/{_id}": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get inventory item by ID",
        "description": "Retrieve inventory item details by MongoDB ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the inventory item"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Inventory"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Inventory"
        ],
        "summary": "Update inventory item",
        "description": "Update inventory item details by MongoDB ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the inventory item"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Inventory item updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Inventory"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Inventory"
        ],
        "summary": "Delete inventory item",
        "description": "Delete an inventory item by MongoDB ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the inventory item to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Inventory item deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/inventory/inventoryID/{inventoryID}": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get inventory item by inventory ID",
        "description": "Retrieve inventory item details by inventory ID (IN-XXXXX format)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "inventoryID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^IN-\\d{5}$"
            },
            "description": "Inventory ID in IN-XXXXX format"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Inventory"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/inventory/product/{productId}": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get inventory by product",
        "description": "Retrieve inventory across all warehouses for a specific product",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the product"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Inventory"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/inventory/warehouse/{warehouseId}": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get inventory by warehouse",
        "description": "Retrieve all inventory items for a specific warehouse",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "warehouseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the warehouse"
          },
          {
            "in": "query",
            "name": "stockStatus",
            "schema": {
              "type": "string",
              "enum": [
                "In Stock",
                "Low Stock",
                "Out of Stock",
                "Overstock"
              ]
            },
            "description": "Filter by inventory stock status"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of records per page"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "default": "product"
            },
            "description": "Sort fields (comma separated), prefix with - for descending order"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "inventory": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Inventory"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/inventory/status/{stockStatus}": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get inventory by stock status",
        "description": "Retrieve inventory items with a specific stock status",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "stockStatus",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "In Stock",
                "Low Stock",
                "Out of Stock",
                "Overstock"
              ]
            },
            "description": "Stock status to filter by"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of records per page"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "default": "product"
            },
            "description": "Sort fields (comma separated), prefix with - for descending order"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "inventory": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Inventory"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/warehouses": {
      "get": {
        "tags": [
          "Warehouses"
        ],
        "summary": "Get all warehouses",
        "description": "Retrieve a list of all warehouses with optional filtering, sorting, and pagination",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter warehouses by name (case-insensitive partial match)"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "Active",
                "Inactive",
                "Maintenance"
              ]
            },
            "description": "Filter warehouses by status"
          },
          {
            "in": "query",
            "name": "minCapacity",
            "schema": {
              "type": "integer"
            },
            "description": "Filter warehouses by minimum capacity"
          },
          {
            "in": "query",
            "name": "maxCapacity",
            "schema": {
              "type": "integer"
            },
            "description": "Filter warehouses by maximum capacity"
          },
          {
            "in": "query",
            "name": "city",
            "schema": {
              "type": "string"
            },
            "description": "Filter warehouses by city"
          },
          {
            "in": "query",
            "name": "state",
            "schema": {
              "type": "string"
            },
            "description": "Filter warehouses by state/province"
          },
          {
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string"
            },
            "description": "Filter warehouses by country"
          },
          {
            "in": "query",
            "name": "postalCode",
            "schema": {
              "type": "string"
            },
            "description": "Filter warehouses by postal code"
          },
          {
            "in": "query",
            "name": "contactName",
            "schema": {
              "type": "string"
            },
            "description": "Filter warehouses by contact name"
          },
          {
            "in": "query",
            "name": "contactEmail",
            "schema": {
              "type": "string"
            },
            "description": "Filter warehouses by contact email"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of records per page"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "default": "name"
            },
            "description": "Sort fields (comma separated), prefix with - for descending order"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "warehouses": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Warehouse"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Warehouses"
        ],
        "summary": "Create a new warehouse",
        "description": "Create a new warehouse record in the system",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WarehouseInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Warehouse created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Warehouse"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Warehouses"
        ],
        "summary": "Delete all warehouses",
        "description": "Delete all warehouses from the system (use with caution)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "All warehouses deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/warehouses/{_id}": {
      "get": {
        "tags": [
          "Warehouses"
        ],
        "summary": "Get warehouse by ID",
        "description": "Retrieve warehouse details by MongoDB ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the warehouse"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Warehouse"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Warehouses"
        ],
        "summary": "Update warehouse",
        "description": "Update warehouse details by MongoDB ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the warehouse"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WarehouseUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Warehouse updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Warehouse"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Warehouses"
        ],
        "summary": "Delete warehouse",
        "description": "Delete a warehouse by MongoDB ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the warehouse to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Warehouse deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/warehouses/warehouseID/{warehouseID}": {
      "get": {
        "tags": [
          "Warehouses"
        ],
        "summary": "Get warehouse by warehouse ID",
        "description": "Retrieve warehouse details by warehouse ID (WH-XXXXX format)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "warehouseID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^WH-\\d{5}$"
            },
            "description": "Warehouse ID in WH-XXXXX format"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Warehouse"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/warehouses/name/{name}": {
      "get": {
        "tags": [
          "Warehouses"
        ],
        "summary": "Get warehouse by name",
        "description": "Retrieve warehouse details by warehouse name",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Exact warehouse name"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Warehouse"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/inventory-transactions": {
      "get": {
        "tags": [
          "Inventory Transactions"
        ],
        "summary": "Get all inventory transactions",
        "description": "Retrieve a list of all inventory transactions with optional filtering, sorting, and pagination",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "transactionType",
            "schema": {
              "type": "string",
              "enum": [
                "Adjustment",
                "Purchase",
                "Sale",
                "Return",
                "Transfer In",
                "Transfer Out",
                "Damaged",
                "Expired",
                "Initial"
              ]
            },
            "description": "Filter by transaction type"
          },
          {
            "in": "query",
            "name": "product",
            "schema": {
              "type": "string"
            },
            "description": "Filter by product ID"
          },
          {
            "in": "query",
            "name": "warehouse",
            "schema": {
              "type": "string"
            },
            "description": "Filter by warehouse ID"
          },
          {
            "in": "query",
            "name": "fromWarehouse",
            "schema": {
              "type": "string"
            },
            "description": "Filter by source warehouse (for transfers)"
          },
          {
            "in": "query",
            "name": "toWarehouse",
            "schema": {
              "type": "string"
            },
            "description": "Filter by destination warehouse (for transfers)"
          },
          {
            "in": "query",
            "name": "documentType",
            "schema": {
              "type": "string",
              "enum": [
                "Purchase",
                "Order",
                "InventoryAdjustment",
                "InventoryTransfer",
                "InventoryReturn"
              ]
            },
            "description": "Filter by reference document type"
          },
          {
            "in": "query",
            "name": "fromDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter transactions after this date (inclusive)"
          },
          {
            "in": "query",
            "name": "toDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter transactions before this date (inclusive)"
          },
          {
            "in": "query",
            "name": "minChange",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by minimum quantity change"
          },
          {
            "in": "query",
            "name": "maxChange",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by maximum quantity change"
          },
          {
            "in": "query",
            "name": "performedBy",
            "schema": {
              "type": "string"
            },
            "description": "Filter by user who performed the transaction"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of records per page"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "default": "-transactionDate"
            },
            "description": "Sort fields (comma separated), prefix with - for descending order"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "transactions": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/InventoryTransaction"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Inventory Transactions"
        ],
        "summary": "Create a new inventory transaction",
        "description": "Create a new inventory transaction record in the system",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryTransactionInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Inventory transaction created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/InventoryTransaction"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Inventory Transactions"
        ],
        "summary": "Delete all inventory transactions",
        "description": "Delete all inventory transactions from the system (use with caution)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "All inventory transactions deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/inventory-transactions/{_id}": {
      "get": {
        "tags": [
          "Inventory Transactions"
        ],
        "summary": "Get inventory transaction by ID",
        "description": "Retrieve inventory transaction details by MongoDB ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the inventory transaction"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/InventoryTransaction"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Inventory Transactions"
        ],
        "summary": "Delete inventory transaction",
        "description": "Delete an inventory transaction by MongoDB ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the inventory transaction to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Inventory transaction deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/inventory-transactions/transactionID/{transactionID}": {
      "get": {
        "tags": [
          "Inventory Transactions"
        ],
        "summary": "Get inventory transaction by transaction ID",
        "description": "Retrieve inventory transaction details by transaction ID (IT-XXXXX format)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "transactionID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^IT-\\d{5}$"
            },
            "description": "Transaction ID in IT-XXXXX format"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/InventoryTransaction"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/inventory-transactions/product/{productId}": {
      "get": {
        "tags": [
          "Inventory Transactions"
        ],
        "summary": "Get inventory transactions by product",
        "description": "Retrieve inventory transactions for a specific product",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the product"
          },
          {
            "in": "query",
            "name": "transactionType",
            "schema": {
              "type": "string"
            },
            "description": "Filter by transaction type"
          },
          {
            "in": "query",
            "name": "warehouse",
            "schema": {
              "type": "string"
            },
            "description": "Filter by warehouse ID"
          },
          {
            "in": "query",
            "name": "fromDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter transactions after this date (inclusive)"
          },
          {
            "in": "query",
            "name": "toDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter transactions before this date (inclusive)"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of records per page"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "default": "-transactionDate"
            },
            "description": "Sort fields (comma separated), prefix with - for descending order"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "transactions": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/InventoryTransaction"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/inventory-transactions/warehouse/{warehouseId}": {
      "get": {
        "tags": [
          "Inventory Transactions"
        ],
        "summary": "Get inventory transactions by warehouse",
        "description": "Retrieve inventory transactions for a specific warehouse",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "warehouseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the warehouse"
          },
          {
            "in": "query",
            "name": "transactionType",
            "schema": {
              "type": "string"
            },
            "description": "Filter by transaction type"
          },
          {
            "in": "query",
            "name": "product",
            "schema": {
              "type": "string"
            },
            "description": "Filter by product ID"
          },
          {
            "in": "query",
            "name": "fromDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter transactions after this date (inclusive)"
          },
          {
            "in": "query",
            "name": "toDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter transactions before this date (inclusive)"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of records per page"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "default": "-transactionDate"
            },
            "description": "Sort fields (comma separated), prefix with - for descending order"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "transactions": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/InventoryTransaction"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/inventory-transactions/type/{transactionType}": {
      "get": {
        "tags": [
          "Inventory Transactions"
        ],
        "summary": "Get inventory transactions by type",
        "description": "Retrieve inventory transactions of a specific type",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "transactionType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "Adjustment",
                "Purchase",
                "Sale",
                "Return",
                "Transfer In",
                "Transfer Out",
                "Damaged",
                "Expired",
                "Initial"
              ]
            },
            "description": "Transaction type"
          },
          {
            "in": "query",
            "name": "product",
            "schema": {
              "type": "string"
            },
            "description": "Filter by product ID"
          },
          {
            "in": "query",
            "name": "warehouse",
            "schema": {
              "type": "string"
            },
            "description": "Filter by warehouse ID"
          },
          {
            "in": "query",
            "name": "fromWarehouse",
            "schema": {
              "type": "string"
            },
            "description": "Filter by source warehouse (for transfers)"
          },
          {
            "in": "query",
            "name": "toWarehouse",
            "schema": {
              "type": "string"
            },
            "description": "Filter by destination warehouse (for transfers)"
          },
          {
            "in": "query",
            "name": "fromDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter transactions after this date (inclusive)"
          },
          {
            "in": "query",
            "name": "toDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter transactions before this date (inclusive)"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of records per page"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "default": "-transactionDate"
            },
            "description": "Sort fields (comma separated), prefix with - for descending order"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "transactions": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/InventoryTransaction"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/inventory-transfers": {
      "get": {
        "tags": [
          "Inventory Transfers"
        ],
        "summary": "Get all inventory transfers",
        "description": "Retrieve a list of all inventory transfers with optional filtering, sorting, and pagination",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "Draft",
                "Pending",
                "Approved",
                "In Transit",
                "Partially Received",
                "Completed",
                "Canceled"
              ]
            },
            "description": "Filter transfers by status"
          },
          {
            "in": "query",
            "name": "fromWarehouse",
            "schema": {
              "type": "string"
            },
            "description": "Filter by source warehouse ID"
          },
          {
            "in": "query",
            "name": "toWarehouse",
            "schema": {
              "type": "string"
            },
            "description": "Filter by destination warehouse ID"
          },
          {
            "in": "query",
            "name": "product",
            "schema": {
              "type": "string"
            },
            "description": "Filter by product ID (returns transfers containing this product)"
          },
          {
            "in": "query",
            "name": "requestedBy",
            "schema": {
              "type": "string"
            },
            "description": "Filter by user who requested the transfer"
          },
          {
            "in": "query",
            "name": "approvedBy",
            "schema": {
              "type": "string"
            },
            "description": "Filter by user who approved the transfer"
          },
          {
            "in": "query",
            "name": "fromDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter transfers requested after this date (inclusive)"
          },
          {
            "in": "query",
            "name": "toDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter transfers requested before this date (inclusive)"
          },
          {
            "in": "query",
            "name": "fromDeliveryDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter transfers with expected delivery after this date"
          },
          {
            "in": "query",
            "name": "toDeliveryDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter transfers with expected delivery before this date"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of records per page"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "default": "-requestDate"
            },
            "description": "Sort fields (comma separated), prefix with - for descending order"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "transfers": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/InventoryTransfer"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Inventory Transfers"
        ],
        "summary": "Create a new inventory transfer",
        "description": "Create a new inventory transfer record in the system",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryTransferInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Inventory transfer created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/InventoryTransfer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Inventory Transfers"
        ],
        "summary": "Delete all inventory transfers",
        "description": "Delete all inventory transfers from the system (use with caution)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "All inventory transfers deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/inventory-transfers/{_id}": {
      "get": {
        "tags": [
          "Inventory Transfers"
        ],
        "summary": "Get inventory transfer by ID",
        "description": "Retrieve inventory transfer details by MongoDB ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the inventory transfer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/InventoryTransfer"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Inventory Transfers"
        ],
        "summary": "Update inventory transfer",
        "description": "Update inventory transfer details by MongoDB ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the inventory transfer"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryTransferUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Inventory transfer updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/InventoryTransfer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Inventory Transfers"
        ],
        "summary": "Delete inventory transfer",
        "description": "Delete an inventory transfer by MongoDB ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the inventory transfer to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Inventory transfer deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/inventory-transfers/transferID/{transferID}": {
      "get": {
        "tags": [
          "Inventory Transfers"
        ],
        "summary": "Get inventory transfer by transfer ID",
        "description": "Retrieve inventory transfer details by transfer ID (TR-XXXXX format)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "transferID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^TR-\\d{5}$"
            },
            "description": "Transfer ID in TR-XXXXX format"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/InventoryTransfer"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/inventory-transfers/{_id}/approve": {
      "put": {
        "tags": [
          "Inventory Transfers"
        ],
        "summary": "Approve inventory transfer",
        "description": "Approve an inventory transfer and change its status to Approved",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the inventory transfer to approve"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "notes": {
                    "type": "string",
                    "example": "Approved after verification of stock levels"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Inventory transfer approved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/InventoryTransfer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/inventory-transfers/{_id}/ship": {
      "put": {
        "tags": [
          "Inventory Transfers"
        ],
        "summary": "Ship inventory transfer",
        "description": "Ship an inventory transfer, update inventory at source warehouse, and change status to In Transit",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the inventory transfer to ship"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "transportInfo": {
                    "type": "object",
                    "properties": {
                      "method": {
                        "type": "string",
                        "example": "Truck"
                      },
                      "carrier": {
                        "type": "string",
                        "example": "Fast Logistics"
                      },
                      "trackingNumber": {
                        "type": "string",
                        "example": "FL123456789"
                      }
                    }
                  },
                  "notes": {
                    "type": "string",
                    "example": "Dispatched via company truck"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Inventory transfer shipped successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/InventoryTransfer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/inventory-transfers/{_id}/receive": {
      "put": {
        "tags": [
          "Inventory Transfers"
        ],
        "summary": "Receive inventory transfer",
        "description": "Receive items from an inventory transfer, update inventory at destination warehouse, and update status",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the inventory transfer to receive"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "product",
                        "receivedQuantity"
                      ],
                      "properties": {
                        "product": {
                          "type": "string",
                          "example": "67f8ec8aaf6bfc397a056b7f"
                        },
                        "receivedQuantity": {
                          "type": "integer",
                          "example": 3
                        }
                      }
                    }
                  },
                  "notes": {
                    "type": "string",
                    "example": "Partial receipt due to some items being back-ordered"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Inventory transfer received successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/InventoryTransfer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/inventory-transfers/from-warehouse/{warehouseId}": {
      "get": {
        "tags": [
          "Inventory Transfers"
        ],
        "summary": "Get transfers by source warehouse",
        "description": "Retrieve inventory transfers from a specific warehouse",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "warehouseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the source warehouse"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "Draft",
                "Pending",
                "Approved",
                "In Transit",
                "Partially Received",
                "Completed",
                "Canceled"
              ]
            },
            "description": "Filter transfers by status"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of records per page"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "default": "-requestDate"
            },
            "description": "Sort fields (comma separated), prefix with - for descending order"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "transfers": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/InventoryTransfer"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/inventory-transfers/to-warehouse/{warehouseId}": {
      "get": {
        "tags": [
          "Inventory Transfers"
        ],
        "summary": "Get transfers by destination warehouse",
        "description": "Retrieve inventory transfers to a specific warehouse",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "warehouseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the destination warehouse"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "Draft",
                "Pending",
                "Approved",
                "In Transit",
                "Partially Received",
                "Completed",
                "Canceled"
              ]
            },
            "description": "Filter transfers by status"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of records per page"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "default": "-requestDate"
            },
            "description": "Sort fields (comma separated), prefix with - for descending order"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "transfers": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/InventoryTransfer"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/inventory-transfers/status/{status}": {
      "get": {
        "tags": [
          "Inventory Transfers"
        ],
        "summary": "Get transfers by status",
        "description": "Retrieve inventory transfers with a specific status",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "status",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "Draft",
                "Pending",
                "Approved",
                "In Transit",
                "Partially Received",
                "Completed",
                "Canceled"
              ]
            },
            "description": "Transfer status to filter by"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of records per page"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "default": "-requestDate"
            },
            "description": "Sort fields (comma separated), prefix with - for descending order"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "transfers": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/InventoryTransfer"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/inventory-returns": {
      "get": {
        "tags": [
          "Inventory Returns"
        ],
        "summary": "Get all inventory returns",
        "description": "Retrieve a list of all inventory returns with optional filtering, sorting, and pagination",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "Draft",
                "Pending",
                "Approved",
                "Completed",
                "Rejected",
                "Canceled"
              ]
            },
            "description": "Filter returns by status"
          },
          {
            "in": "query",
            "name": "returnType",
            "schema": {
              "type": "string",
              "enum": [
                "Customer Return",
                "Supplier Return",
                "Damaged Goods",
                "Defective Product"
              ]
            },
            "description": "Filter by return type"
          },
          {
            "in": "query",
            "name": "product",
            "schema": {
              "type": "string"
            },
            "description": "Filter by product ID"
          },
          {
            "in": "query",
            "name": "customer",
            "schema": {
              "type": "string"
            },
            "description": "Filter by customer ID (for customer returns)"
          },
          {
            "in": "query",
            "name": "supplier",
            "schema": {
              "type": "string"
            },
            "description": "Filter by supplier ID (for supplier returns)"
          },
          {
            "in": "query",
            "name": "warehouse",
            "schema": {
              "type": "string"
            },
            "description": "Filter by warehouse ID"
          },
          {
            "in": "query",
            "name": "referenceOrder",
            "schema": {
              "type": "string"
            },
            "description": "Filter by reference order ID"
          },
          {
            "in": "query",
            "name": "referencePurchase",
            "schema": {
              "type": "string"
            },
            "description": "Filter by reference purchase ID"
          },
          {
            "in": "query",
            "name": "fromDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter returns after this date (inclusive)"
          },
          {
            "in": "query",
            "name": "toDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter returns before this date (inclusive)"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of records per page"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "default": "-createdAt"
            },
            "description": "Sort fields (comma separated), prefix with - for descending order"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "returns": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/InventoryReturn"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Inventory Returns"
        ],
        "summary": "Create a new inventory return",
        "description": "Create a new inventory return record in the system",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryReturnInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Inventory return created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/InventoryReturn"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/inventory-returns/{_id}": {
      "get": {
        "tags": [
          "Inventory Returns"
        ],
        "summary": "Get inventory return by ID",
        "description": "Retrieve inventory return details by MongoDB ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the inventory return"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/InventoryReturn"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Inventory Returns"
        ],
        "summary": "Update inventory return",
        "description": "Update inventory return details by MongoDB ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the inventory return"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryReturnUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Inventory return updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/InventoryReturn"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Inventory Returns"
        ],
        "summary": "Delete inventory return",
        "description": "Delete an inventory return by MongoDB ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the inventory return to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Inventory return deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/inventory-returns/returnID/{returnID}": {
      "get": {
        "tags": [
          "Inventory Returns"
        ],
        "summary": "Get inventory return by return ID",
        "description": "Retrieve inventory return details by return ID (RET-XXXXX format)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "returnID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^RET-\\d{5}$"
            },
            "description": "Return ID in RET-XXXXX format"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/InventoryReturn"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/inventory-returns/{_id}/approve": {
      "put": {
        "tags": [
          "Inventory Returns"
        ],
        "summary": "Approve inventory return",
        "description": "Approve an inventory return request and change its status to Approved",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the inventory return to approve"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "notes": {
                    "type": "string",
                    "example": "Return approved after quality verification"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Inventory return approved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/InventoryReturn"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/inventory-returns/{_id}/complete": {
      "put": {
        "tags": [
          "Inventory Returns"
        ],
        "summary": "Complete inventory return",
        "description": "Mark an inventory return as completed and update inventory accordingly",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the inventory return to complete"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "actualReturnedItems": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "product",
                        "quantity",
                        "condition"
                      ],
                      "properties": {
                        "product": {
                          "type": "string",
                          "example": "67f8ec8aaf6bfc397a056b7f"
                        },
                        "quantity": {
                          "type": "number",
                          "example": 2
                        },
                        "condition": {
                          "type": "string",
                          "enum": [
                            "Good",
                            "Damaged",
                            "Defective",
                            "Expired"
                          ],
                          "example": "Good"
                        },
                        "notes": {
                          "type": "string",
                          "example": "Minor packaging damage"
                        }
                      }
                    }
                  },
                  "notes": {
                    "type": "string",
                    "example": "All items received as expected"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Inventory return completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/InventoryReturn"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/inventory-returns/status/{status}": {
      "get": {
        "tags": [
          "Inventory Returns"
        ],
        "summary": "Get returns by status",
        "description": "Retrieve inventory returns with a specific status",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "status",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "Draft",
                "Pending",
                "Approved",
                "Completed",
                "Rejected",
                "Canceled"
              ]
            },
            "description": "Return status to filter by"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of records per page"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "default": "-createdAt"
            },
            "description": "Sort fields (comma separated), prefix with - for descending order"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "returns": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/InventoryReturn"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/inventory-returns/type/{returnType}": {
      "get": {
        "tags": [
          "Inventory Returns"
        ],
        "summary": "Get returns by type",
        "description": "Retrieve inventory returns of a specific type",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "returnType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "Customer Return",
                "Supplier Return",
                "Damaged Goods",
                "Defective Product"
              ]
            },
            "description": "Return type to filter by"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of records per page"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "default": "-createdAt"
            },
            "description": "Sort fields (comma separated), prefix with - for descending order"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "returns": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/InventoryReturn"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/inventory-adjustments": {
      "get": {
        "tags": [
          "Inventory Adjustments"
        ],
        "summary": "Get all inventory adjustments",
        "description": "Retrieve a list of all inventory adjustments with optional filtering, sorting, and pagination",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "Pending",
                "Approved",
                "Completed",
                "Rejected",
                "Canceled"
              ]
            },
            "description": "Filter adjustments by status"
          },
          {
            "in": "query",
            "name": "adjustmentType",
            "schema": {
              "type": "string",
              "enum": [
                "Quantity Correction",
                "Inventory Count",
                "Write-Off",
                "Expired",
                "Damaged"
              ]
            },
            "description": "Filter by adjustment type"
          },
          {
            "in": "query",
            "name": "product",
            "schema": {
              "type": "string"
            },
            "description": "Filter by product ID"
          },
          {
            "in": "query",
            "name": "warehouse",
            "schema": {
              "type": "string"
            },
            "description": "Filter by warehouse ID"
          },
          {
            "in": "query",
            "name": "requestedBy",
            "schema": {
              "type": "string"
            },
            "description": "Filter by user who requested the adjustment"
          },
          {
            "in": "query",
            "name": "approvedBy",
            "schema": {
              "type": "string"
            },
            "description": "Filter by user who approved the adjustment"
          },
          {
            "in": "query",
            "name": "fromDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter adjustments after this date (inclusive)"
          },
          {
            "in": "query",
            "name": "toDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter adjustments before this date (inclusive)"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of records per page"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "default": "-createdAt"
            },
            "description": "Sort fields (comma separated), prefix with - for descending order"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "adjustments": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/InventoryAdjustment"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Inventory Adjustments"
        ],
        "summary": "Create a new inventory adjustment",
        "description": "Create a new inventory adjustment record in the system",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryAdjustmentInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Inventory adjustment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/InventoryAdjustment"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/inventory-adjustments/{_id}": {
      "get": {
        "tags": [
          "Inventory Adjustments"
        ],
        "summary": "Get inventory adjustment by ID",
        "description": "Retrieve inventory adjustment details by MongoDB ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the inventory adjustment"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/InventoryAdjustment"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Inventory Adjustments"
        ],
        "summary": "Update inventory adjustment",
        "description": "Update inventory adjustment details by MongoDB ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the inventory adjustment"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryAdjustmentUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Inventory adjustment updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/InventoryAdjustment"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Inventory Adjustments"
        ],
        "summary": "Delete inventory adjustment",
        "description": "Delete an inventory adjustment by MongoDB ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the inventory adjustment to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Inventory adjustment deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/inventory-adjustments/adjustmentID/{adjustmentID}": {
      "get": {
        "tags": [
          "Inventory Adjustments"
        ],
        "summary": "Get inventory adjustment by adjustment ID",
        "description": "Retrieve inventory adjustment details by adjustment ID (ADJ-XXXXX format)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "adjustmentID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^ADJ-\\d{5}$"
            },
            "description": "Adjustment ID in ADJ-XXXXX format"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/InventoryAdjustment"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/inventory-adjustments/{_id}/approve": {
      "put": {
        "tags": [
          "Inventory Adjustments"
        ],
        "summary": "Approve inventory adjustment",
        "description": "Approve an inventory adjustment request and change its status to Approved",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the inventory adjustment to approve"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "notes": {
                    "type": "string",
                    "example": "Adjustment approved based on physical count verification"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Inventory adjustment approved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/InventoryAdjustment"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/inventory-adjustments/{_id}/complete": {
      "put": {
        "tags": [
          "Inventory Adjustments"
        ],
        "summary": "Complete inventory adjustment",
        "description": "Execute the inventory adjustment and update inventory quantities",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "MongoDB ID of the inventory adjustment to complete"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "notes": {
                    "type": "string",
                    "example": "Adjustment completed and inventory updated"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Inventory adjustment completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/InventoryAdjustment"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/inventory-adjustments/status/{status}": {
      "get": {
        "tags": [
          "Inventory Adjustments"
        ],
        "summary": "Get adjustments by status",
        "description": "Retrieve inventory adjustments with a specific status",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "status",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "Pending",
                "Approved",
                "Completed",
                "Rejected",
                "Canceled"
              ]
            },
            "description": "Adjustment status to filter by"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of records per page"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "default": "-createdAt"
            },
            "description": "Sort fields (comma separated), prefix with - for descending order"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "adjustments": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/InventoryAdjustment"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/inventory-adjustments/type/{adjustmentType}": {
      "get": {
        "tags": [
          "Inventory Adjustments"
        ],
        "summary": "Get adjustments by type",
        "description": "Retrieve inventory adjustments of a specific type",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "adjustmentType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "Quantity Correction",
                "Inventory Count",
                "Write-Off",
                "Expired",
                "Damaged"
              ]
            },
            "description": "Adjustment type to filter by"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of records per page"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "default": "-createdAt"
            },
            "description": "Sort fields (comma separated), prefix with - for descending order"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "adjustments": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/InventoryAdjustment"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    }
  }
}